## @configure_input@
##
## Filename    : Makefile.in
## Description : Makefile template for libsbml Python bindings
## Author(s)   : SBML Team <sbml-team@caltech.edu>
## Organization: California Institute of Technology
## Created     : 2004-06-17
## Revision    : $Id$
## Source      : $Source$
##
## Copyright 2004 California Institute of Technology and
## Japan Science and Technology Corporation.
##
## This library is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as published
## by the Free Software Foundation; either version 2.1 of the License, or
## any later version.
##
## This library is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
## MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
## documentation provided hereunder is on an "as is" basis, and the
## California Institute of Technology and Japan Science and Technology
## Corporation have no obligations to provide maintenance, support,
## updates, enhancements or modifications.  In no event shall the
## California Institute of Technology or the Japan Science and Technology
## Corporation be liable to any party for direct, indirect, special,
## incidental or consequential damages, including lost profits, arising
## out of the use of this software and its documentation, even if the
## California Institute of Technology and/or Japan Science and Technology
## Corporation have been advised of the possibility of such damage.  See
## the GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library; if not, write to the Free Software Foundation,
## Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
##
## The original code contained here was initially developed by:
##
##     Ben Bornstein and Ben Kovitz
##     SBML Team
##     Control and Dynamical Systems, MC 107-81
##     California Institute of Technology
##     Pasadena, CA, 91125, USA
##
##     http://www.sbml.org
##     mailto:sbml-team@caltech.edu
##
## Contributor(s):
##   Michael Hucka <mhucka@caltech.edu> Wrote this Makefile.in.
##


# -----------------------------------------------------------------------------
# Configuration variables
# -----------------------------------------------------------------------------
# Some of the following are substituted automatically by `configure'.  If
# you are looking at "Makefile", do not edit these values; instead, run the
# configure script at the top level of the src tree.  It will recreate
# "Makefile".

include @top_srcdir@/config/makefile-common-vars.mk

# `srcdir' points to the current directory, but should be set by configure.
# `subdir' must be set manually to the relative dir under srcdir.  Don't 
# set `subdir' to an absolute path, or some make actions will fail.

srcdir  = @srcdir@
thisdir = bindings/java

# `sources' are used by the default rules to determine what needs to be
# compiled.  `extra_sources' are other source files that need to be
# distributed but not compiled.

sources = \
          libsbml_wrap.cpp

# FIXME: Ideally we want the .jar file to depend on the .class files, the
# .class files to depend on the .java files, and the .java files to depend
# on the libsbml_wrap.cpp file.  But the .java files are generated by SWIG,
# and there seems to be no way to determine a priori the set of .java files
# that SWIG will generate from the libsbml codebase.  The following lists
# all the source files that are currently generated, but this list needs to
# be manually maintained, which is a serious maintenance problem.  We need
# to find an automatic way to determine the list of files that SWIG will
# generate.

java_sources = \
          AlgebraicRule.java            \
          AssignmentRule.java           \
          ASTNode.java                  \
          Compartment.java              \
          CompartmentVolumeRule.java    \
          Event.java                    \
          EventAssignment.java          \
          FunctionDefinition.java       \
          KineticLaw.java               \
          libsbml.java                  \
          libsbmlConstants.java         \
          libsbmlJNI.java               \
          ListOf.java                   \
          MathMLDocument.java           \
          Model.java                    \
          ModifierSpeciesReference.java \
          Parameter.java                \
          ParameterRule.java            \
          ParseMessage.java             \
          RateRule.java                 \
          Reaction.java                 \
          Rule.java                     \
          SBase.java                    \
          SBMLDocument.java             \
          SBMLReader.java               \
          SimpleSpeciesReference.java   \
          Species.java                  \
          SpeciesConcentrationRule.java \
          SpeciesReference.java         \
          Unit.java                     \
	  UnitDefinition.java

extra_sources = $(java_sources) \
	  libsbml.i \
	  local.cpp \
	  local.i \
	  Test.java

java_package   = org.sbml.$(PACKAGE)
jarfile        = libsbmlj.jar
jnifile        = libsbmlj.$(JNIEXT)

# There are two libraries to build: the shared JNI library, and the Jar file.

libraries      = $(jarfile) $(jnifile)

# Variables `subdirs', `headers', `sources', `libraries', `extra_CPPFLAGS',
# `extra_CXXFLAGS', `extra_LDFLAGS' and `distfiles' are used by the default
# rules in `makefile-common-actions.mk' included at the end.

extra_CXXFLAGS = $(JAVA_CPPFLAGS) -I../swig

extra_LDFLAGS  = $(JAVA_LDFLAGS)

extra_LIBS     = -L../../src -lsbml $(JAVA_LIBS)

ifeq ($(USE_EXPAT),1)
  extra_CXXFLAGS += $(EXPAT_CPPFLAGS)
  extra_LDFLAGS  += $(EXPAT_LDFLAGS) -L../../expat
  extra_LIBS     += $(EXPAT_LIBS) -lexpat-compat
else
  extra_CXXFLAGS += $(XERCES_CPPFLAGS)
  extra_LDFLAGS  += $(XERCES_LDFLAGS)
  extra_LIBS     += $(XERCES_LIBS)
endif

# We don't actually use libcheck for the Java API library, but the request
# to use it acts as a flag to turn on the Java-specific testing code.

ifeq ($(USE_LIBCHECK),1)
  check_sources = Test.java
endif

# For Linux/Unix LD_LIBRARY_PATH *may* need to contain one or more library
# paths to libsbml.so, libxerces-c.so and/or libexpat.so and/or the
# libsbml.so _libsbml.so generated by this Makfile.  (For BSD/MacOS X
# replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH.)


# -----------------------------------------------------------------------------
# Primary build actions
# -----------------------------------------------------------------------------

.SUFFIXES:
.SUFFIXES: .i .cpp .hpp .java .class .jar .o .obj .so .dylib

objfiles = libsbml_wrap.$(OBJEXT)
outdir   = java-files

# The default action is to remake everything.  Those rules which are not
# defined below are defined in makefile-common-actions.mk.

all: Makefile $(libraries)

class_files = $(java_sources:.java=.class)
pkg_path    = $(subst .,/,$(java_package))
outpath     = $(outdir)/$(pkg_path)
extra_clean = $(class_files)

$(jarfile): libsbml_wrap.cpp $(addprefix $(outpath)/,$(class_files))
	$(CD) $(outdir) && \
	  $(JAR) cvf ../$(jarfile) $(addprefix $(pkg_path)/,$(class_files))

$(outpath):
	$(shell [ -d $(outpath) ] || mkdir -p $(outpath))

$(outpath)/%.class: $(outpath)/%.java
	$(JAVAC) -d $(outdir) $(outpath)/*.java

# MacOS X is different.

ifeq ($(HOST_TYPE),darwin)

  $(jnifile): $(objfiles)
	$(CXX) $(LDFLAGS) $(extra_LDFLAGS) -bundle \
	  -o $@ $(objfiles) $(extra_LIBS) $(LIBS)

else

  $(jnifile): $(objfiles)
	$(call link_shared_lib,$@)

endif

# The following is for developers and maintainers.  Recipients of the
# library distributions shouldn't have to run SWIG because we provide the
# wrapper file ready-made.  This is only enabled if configure is given the
# --with-swig flag.

ifdef SWIG

  swig_sources = \
	  ../swig/libsbml.hpp \
	  ../swig/libsbml.i

  $(java_sources): libsbml_wrap.cpp

  libsbml_wrap.cpp: $(swig_sources) $(outpath)
	$(SWIG) $(SWIGFLAGS) $(extra_CXXFLAGS) -I../../src -outdir $(outpath) \
	   -c++ -java -package $(java_package) -o libsbml_wrap.cpp libsbml.i

endif

# Additional standard targets.

check: all run-checks

dvi:

pdf:

ps:

info:


# -----------------------------------------------------------------------------
# Targets for checking/testing.
# -----------------------------------------------------------------------------

check_classes = $(check_sources:.java=.class)

classpath = $(jarfile):$(outdir):$(TOP_BUILDDIR)/src:.

$(check_classes): Makefile $(libraries) $(check_sources)
	$(JAVAC) -g -classpath $(classpath) $(check_sources)

run-checks: $(check_classes)
	$(JAVA) -classpath $(classpath) Test


# -----------------------------------------------------------------------------
# Installation.
# -----------------------------------------------------------------------------

install: $(libraries)
	@list='$(libraries)'; for lib in $$list; do \
	  echo "$(INSTALL) $$lib $(DESTDIR)$(LIBDIR)"; \
	  $(INSTALL) $$lib $(DESTDIR)$(LIBDIR); \
	done;

uninstall:

install-data:

install-exec:

installdirs:

install-info:

uninstall-info:

installcheck:


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

include @top_srcdir@/config/makefile-common-actions.mk


# -----------------------------------------------------------------------------
# End.
# -----------------------------------------------------------------------------
