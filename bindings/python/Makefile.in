## @configure_input@
##
## Filename    : Makefile.in
## Description : Makefile template for libsbml Python bindings
## Author(s)   : SBML Team <sbml-team@caltech.edu>
## Organization: California Institute of Technology
## Created     : 2004-06-17
## Revision    : $Id$
## Source      : $Source$
##
## Copyright 2004 California Institute of Technology and
## Japan Science and Technology Corporation.
##
## This library is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as published
## by the Free Software Foundation; either version 2.1 of the License, or
## any later version.
##
## This library is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
## MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
## documentation provided hereunder is on an "as is" basis, and the
## California Institute of Technology and Japan Science and Technology
## Corporation have no obligations to provide maintenance, support,
## updates, enhancements or modifications.  In no event shall the
## California Institute of Technology or the Japan Science and Technology
## Corporation be liable to any party for direct, indirect, special,
## incidental or consequential damages, including lost profits, arising
## out of the use of this software and its documentation, even if the
## California Institute of Technology and/or Japan Science and Technology
## Corporation have been advised of the possibility of such damage.  See
## the GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library; if not, write to the Free Software Foundation,
## Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
##
## The original code contained here was initially developed by:
##
##     Ben Bornstein and Ben Kovitz
##     SBML Team
##     Control and Dynamical Systems, MC 107-81
##     California Institute of Technology
##     Pasadena, CA, 91125, USA
##
##     http://www.sbml.org
##     mailto:sbml-team@caltech.edu
##
## Contributor(s):
##   Michael Hucka <mhucka@caltech.edu> Wrote this Makefile.in.
##


# -----------------------------------------------------------------------------
# Configuration variables
# -----------------------------------------------------------------------------
# Some of the following are substituted automatically by `configure'.  If
# you are looking at "Makefile", do not edit these values; instead, run the
# configure script at the top level of the src tree.  It will recreate
# "Makefile".

include @top_srcdir@/config/makefile-common-vars.mk

# `srcdir' points to the current directory, but should be set by configure.
# `subdir' must be set manually to the relative dir under srcdir.  Don't 
# set `subdir' to an absolute path, or some make actions will fail.

srcdir  = @srcdir@
thisdir = bindings/python

# `sources' are used by the default rules to determine what needs to be
# compiled.  `extra_sources' are other source files that need to be
# distributed but not compiled.

sources = \
	  libsbml_wrap.cpp

extra_sources = \
	  accept.py \
	  libsbml.i \
	  local.cpp \
	  local.i \
	  setup.py

# What we're building is a module for use with Python.
# The leading underscore below is a Python convention.
# MacOS X note: this MUST remain .so even though we use .dylib for libsbml.

libraries = _libsbml.so

# Variables `subdirs', `headers', `sources', `libraries', `extra_CPPFLAGS',
# `extra_CXXFLAGS', `extra_LDFLAGS' and `distfiles' are used by the default
# rules in `makefile-common-actions.mk' included at the end.

extra_CXXFLAGS = $(PYTHON_CPPFLAGS) -I../swig
SWIGFLAGS += $(PYTHON_CPPFLAGS) -I../swig

# On MacOS X, compilation generates a warning about `long double'.

ifeq "$(HOST_TYPE)" "darwin"
  extra_CXXFLAGS += -Wno-long-double
endif

extra_LDFLAGS  = $(PYTHON_LDFLAGS)
extra_LIBS     = -L../../src -lsbml $(PYTHON_LIBS)

ifeq "$(USE_EXPAT)" "1"
  extra_CXXFLAGS += $(EXPAT_CPPFLAGS)
  extra_LDFLAGS  += $(EXPAT_LDFLAGS) -L../../expat
  extra_LIBS     += $(EXPAT_LIBS) -lexpat-compat
else
  extra_CXXFLAGS += $(XERCES_CPPFLAGS)
  extra_LDFLAGS  += $(XERCES_LDFLAGS)
  extra_LIBS     += $(XERCES_LIBS)
endif

# We don't actually use libcheck for the Python API library, but the request
# to use it acts as a flag to run the Python-specific testing code.

ifeq "$(USE_LIBCHECK)" "1"
  check_programs = accept.py
endif

# For Linux/Unix LD_LIBRARY_PATH *may* need to contain one or more library
# paths to libsbml.so, libxerces-c.so and/or libexpat.so and/or the
# libsbml.so _libsbml.so generated by this Makfile.  (For BSD/MacOS X
# replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH.)

# `distfiles' determines the files and directories included in a distribution.
# `distfiles_exclude' is used to filter out specific items, so that even if
# they appear in `distfiles', they will not be copied in the distribution.

distfiles = $(sources) $(extra_sources) Makefile.in


# -----------------------------------------------------------------------------
# Primary build actions
# -----------------------------------------------------------------------------

.SUFFIXES:
.SUFFIXES: .i .cpp .py .pyc .pyo .o .obj

objfiles = libsbml_wrap.$(OBJEXT)

# The default action is to remake everything.

all: Makefile $(libraries)

# The libSBML Python API library on MacOS X has to be built as a "bundle"
# rather than a .dylib library.  This is different from the default rules
# used elsewhere in libSBML and requires the following special value for
# `platform_link_flags'.  The rest of the default rules for .so's will
# behave properly once this is set.

ifeq "$(HOST_TYPE)" "darwin"
  platform_link_flags = -bundle
endif

# The following is for developers and maintainers.  Recipients of the
# library distributions shouldn't have to run SWIG because we provide the
# wrapper file ready-made.  This is only enabled if configure is given the
# --with-swig flag.

ifdef SWIG

  swig_sources = \
	  ../swig/libsbml.hpp \
	  ../swig/libsbml.i

  libsbml_wrap.cpp libsbml.py: $(swig_sources)
	$(SWIG) $(SWIGFLAGS) -I../../src \
	  -c++ -python -o libsbml_wrap.cpp libsbml.i
endif

# Additional standard targets.

check: all run-checks

dvi:

pdf:

ps:

info:

html:


# -----------------------------------------------------------------------------
# Targets for checking/testing.
# -----------------------------------------------------------------------------

run-checks: $(libraries)
	@echo
	@echo Running test: $@
	@echo -------------
	$(call libsbmlrun,$(PYTHON) accept.py)
	@echo


# -----------------------------------------------------------------------------
# Installation.
# -----------------------------------------------------------------------------

install: install-libraries

uninstall: uninstall-libraries

installcheck: installcheck-libraries


# -----------------------------------------------------------------------------
# Creating distribution (for libSBML maintainers only)
# -----------------------------------------------------------------------------

dist: dist-normal

distcheck: distcheck-normal


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

include @top_srcdir@/config/makefile-common-actions.mk


# -----------------------------------------------------------------------------
# End.
# -----------------------------------------------------------------------------
