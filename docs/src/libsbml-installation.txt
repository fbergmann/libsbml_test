/** @page libsbml-installation Installing libSBML

<center>
<table border="0">
<tr><td style="font-size: small;">
@ref quick \n
- @ref quick-unix
- @ref quick-windows

@ref detailed \n
- @ref basic-config
- @ref compiling
- @ref other-options
  - @ref other-lang
  - @ref unit-testing
- @ref windows
</tr></td>
</table>
</center>


@section quick Quick Start Instructions

If you are using the Xerces XML library, beware there is a known bug in
Xerces 2.6.0 that cannot be worked around at this time and causes errors in
software using it.  Xerces versions 2.2 - 2.5 and 2.7.0 are known to work
properly.  We recommend Xerces 2.7.


@subsection quick-unix Linux, MacOS X and Solaris 

At a shell (terminal) command prompt, untar the distribution, cd into the
directory thereby created (e.g., <tt>libsbml-2.4</tt>), and first type:

@verbatim
  ./configure
@endverbatim

If you do not have the Xerces-C++ XML library on your system, the
configure step will fail.  In that case, you can try using the Expat
or libxml libraries instead.  For Expat, use

@verbatim
  ./configure --with-expat
@endverbatim

and for libxml, use

@verbatim
  ./configure --with-libxml
@endverbatim

By default, libSBML only builds the C and C++ API library.  If you
want to configure libSBML to build the Java, Python, Perl, Lisp and/or
MATLAB API libraries as well, add the flags @c --with-java,
@c --with-python, @c --with-perl, @c --with-lisp and/or @c --with-matlab to
the configure command.  You can combine options as you need.

Depending on your system, you may need to tell the configure program where
to find some of these extra components by adding a directory path after the
option.  For example, if you wish to use a copy of Java whose components
are in @c /usr/local (with files in @c /usr/local/lib), use

@verbatim
  ./configure --with-expat --with-python --with-java=/usr/local
@endverbatim

Once you've successfully configured libSBML, run the following two
commands to build and install it:

@verbatim
  make
  make install
@endverbatim

Optionally, to install the documentation files, also do

@verbatim
  make install-docs
@endverbatim

To compile C or C++ programs that use libSBML with GCC, use a command
such as the following, where @c -lsbml tells the compiler to link with
the installed libSBML library:

@verbatim
  gcc -o myapp.c myapp.c -lsbml
@endverbatim

If the compiler cannot find the library, refer to Section 3.2 below for
information about @c ldconfig, @c LD_LIBRARY_PATH, and related matters.



@subsection quick-windows Windows

Download and run the self-extracting windows installer for libSBML.  There
are debug (@c libsbmld) and release (@c libsbml) versions of libSBML, with
@c .dll and @c .lib files for both versions in the @c win32/bin subdirectory
of the libSBML distribution.  Header files are located in the subdirectory
@c win32/include/sbml.

Users of Visual C++ should make their Visual C++ projects link with the
files <tt>libsbml.lib</tt> or <tt>libsbmld.lib</tt> and generate
code for the Multithreaded DLL or Debug Multithreaded DLL version of the
VC++ runtime, respectively.


@section detailed Detailed Instructions for Configuring and Installing LibSBML

LibSBML requires a separate XML library for low-level XML tokenizing and
Unicode support.  As of libSBML 3.0, it supports the Xerces-C++, Expat, and
libXML XML libraries on Linux, Windows, MacOS X and Solaris.  Many Linux
systems provide one or more of these libraries either as part of their
standard distribution or as an optional RPM, Debian, Mandrake or other
package.  For more information, see http://xml.apache.org/xerces-c/ for
Xerces, http://expat.sf.net for Expat, and http://xmlsoft.org for libxml2.


@subsection basic-config Configuring for Linux, MacOS X and Solaris

If you have obtained the libSBML source code distribution, then at your
Linux, MacOS X or Solaris command prompt, unpack the distribution, cd into
the directory created (e.g., <tt>libsbml-2.4.0</tt>), and type the
following command in a terminal shell window to configure libSBML for your
system:

@verbatim
  ./configure
@endverbatim

To specify Expat or libxml2 explicitly rather than the libSBML default of
Xerces, use a command such as the following instead:

@verbatim
  ./configure --with-expat
@endverbatim
or 
@verbatim
  ./configure --with-libxml
@endverbatim

If your Expat, Xerces or libxml2 is installed in a non-standard location on
your computer system (e.g., a private home directory), @c configure may not
be able to detect it.  In this case, @c configure needs to be told
explicitly where to find the libraries.  Use the following forms:

@verbatim
  ./configure --with-expat="DIR"
@endverbatim
or
@verbatim
  ./configure --with-xerces="DIR"
@endverbatim
or
@verbatim
  ./configure --with-libxml="DIR"
@endverbatim

where DIR is the parent directory of where the @c include and @c lib
directories of Xerces, Expat or libxml2 (whichever one you are trying to
use) is located.  For example, on MacOS&nbsp;X, if you used Fink to install
Expat in Fink's default software tree, you would configure libSBML using
the following command:

@verbatim
  ./configure --with-xerces="/sw"
@endverbatim

During the installation phase (i.e., during @c make @c install,
discussed below), the default libSBML installation commands will copy
header files to @c /usr/local/include/sbml, the (shared and static) library
files to @c /usr/local/lib, and documentation files in various formats to
@c /usr/local/share/doc/libsbml-VERSION, by default.  To specify a
different installation location, use the @c --prefix argument to configure.
For example,

@verbatim
  ./configure --prefix="/my/favorite/path"
@endverbatim

Of course, you can combine the flags to configure, giving both
@c --prefix and @c --with-expat or @c --with-xerces or @c --with-libxml to
set both options.


@subsection compiling Compiling and Installing LibSBML

Once configured, building should be very easy.  Simply execute the
following commands at your Linux, MacOS X or Solaris command prompt:

@verbatim
  make
  make install
@endverbatim

Note that you will probably have to perform the make install command as the
user 'root' on your system if you used the default installation directory
(@c /usr/local) or you set @c --prefix to a system directory that only root
is permitted to write into.

Optionally, to install local copies of the documentation, execute

@verbatim
  make docs
@endverbatim

Finally, on most platforms, you will also need to either run the system
program @c ldconfig as user 'root' (consult the man page for ldconfig if
this is unfamiliar), or else set the environment variable @c
LD_LIBRARY_PATH in your terminal shell window.  (On MacOS X, the variable
is named @c DYLD_LIBRARY_PATH.)  If you do not do this, attempting to link
other programs with the libSBML library will fail with errors about being
unable to find it.

If all went as it should, libSBML should end up compiled and installed on
your system, in either the default location (@c /usr/local/) or in the
location you indicated during the configuration step as explained above.


@subsection other-options Additional Options for Configuring LibSBML

In addition to the @c --prefix, @c --with-expat and @c --with-xerces
options already described, the libSBML configuration command supports the
options described below.

@subsubsection other-lang Interfaces to Java, Lisp, Perl, Python and MATLAB

libSBML includes language bindings for Java, Perl, Python, Common Lisp and
MATLAB, enabling you to write Java, Perl, Python, Lisp and MATLAB programs
that call libSBML methods, and work with libSBML through Python's and
MATLAB's interactive modes.  Short tutorials for how to use these
facilities are available in the libSBML documentation.

To enable the library extensions for Java, Python, Lisp and MATLAB,
you need to supply additional options to configure.  These options are
@c --with-java, @c --with-perl, @c --with-python, @c --with-lisp, and
@c --with-matlab.  As with other configure options, these three take an
optional prefix argument; for example,

@verbatim
  ./configure --with-java="DIR"
@endverbatim

If you want to build multiple language bindings for libSBML, combine
multiple flags together as in the following example:

@verbatim
  ./configure --with-java --with-python
@endverbatim

The libSBML distribution ships with certain interface files provided, so
that you do not need to have the software necessary to recreate them.
However, if you obtained the libSBML distribution from CVS or want to
recreate the files deliberately, you will need SWIG, the Simplified Wrapper
and Interface Generator.  More information about SWIG is available from
http://www.swig.org.  At this time, libSBML is known to work only with the
latest stable version of SWIG (1.3.24); earlier versions are known not to
work.  To tell configure to enable the use of SWIG to regenerate the
interface files, use the @c --with-swig option to configure.  If your copy
of SWIG is installed in a non-standard location, you can specify it on the
configure command line like this:

@verbatim
  ./configure --with-swig="DIR"
@endverbatim

As with Expat and Xerces, the directory @c /sw is what you would specify if
you were running on MacOS X and you used Fink to install SWIG, Python, etc.


@subsubsection unit-testing Unit Testing

libSBML provides built-in facilities for testing itself.  To run the unit
tests, a second library is required, @c libcheck (version 0.9.2 or higher).
Check is a very lightweight C unit test framework based on the xUnit
framework popularized by Kent Beck and eXtreme Programming.  Check is quite
small and once installed, it consists of only two files: libcheck.a and
check.h.  To download Check, visit http://check.sf.net/.

(Note: Debian users can find Check as a standard add-on package (.deb).  As
of 11 Feb. 2007, MacOS X users @e cannot use Fink's version of check
because it is an old version, 0.8.x.  LibSBML needs version 0.9.x.)

To enable the unit testing facilities in libSBML, add the @c --with-check
flag to the configure command:

@verbatim
  ./configure --with-check
@endverbatim

Following this, you must build libSBML and then you can run the tests:

@verbatim
  make
  make check
@endverbatim

The make check step is optional and will build and run an extensive suite
of unit tests to verify all facets of the library.  These tests are meant
primarily for developers of libSBML and running them is not required for
the library to function properly.  All tests should pass with no failures
or errors.  If for some reason this is not the case on your system, please
submit a bug report using the mechanisms described in \ref
libsbml-communications.


@subsection windows Configuring and Building for Windows

The Windows distributions of libSBML come in the form of both precompiled
binaries (with a self-extracting installer), and source code.  The
precompiled binaries come ready-to-use and only need to be installed.  The
source distribution is a @c .zip file containing the libSBML code that must
be extracted in a directory on your system, compiled and installed.

As mentioned above, libSBML requires that the Xerces-C, Expat or libxml XML
parsing libraries be available on your computer prior to attempting to
compile libSBML.  The DLL for Xerces, Expat or libxml must be placed in the
@c win32/bin subdirectory of the libSBML directory.

To build libsbml on Windows:

-# You need to create the include directory structure.
   In <tt>&lt;libsbml&gt;/win32</tt> run the @c createInclude batch file.
-# In Visual Studio 7, open <tt>&lt;libsbml&gt;/win32/MSVC7/libsbml.sln</tt>.
   In Visual Studio 6, open <tt>&lt;libsbml&gt;/win32/MSVC6/libsbml.dsw</tt>.
-# Select Tools->Options, and select Projects/Directories (VS7) or
   click the Directories tab (VS6).
   The screen for indicating which directories contain project-relevant
   files appears.
-# At "Show Directories For:", select "Include Files".  Add the
   following if it's not already shown:
   @code
      <libsbml>/src
   @endcode
-# At "Show Directories For:", select "Library Files".  Add the
   following if it's not already shown:
   @code
      <libsbml>/win32/bin
   @endcode
-# Select Build->Rebuild All from the Visual Studio main menu.



*/
