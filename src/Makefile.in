## @configure_input@
##
## Filename    : Makefile.in
## Description : Makefile template for libsbml main sources
## Author(s)   : SBML Team <sbml-team@caltech.edu>
## Organization: California Institute of Technology
## Created     : 2004-06-11
## Revision    : $Id$
## Source      : $Source$
##
## Copyright 2004 California Institute of Technology and
## Japan Science and Technology Corporation.
##
## This library is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as published
## by the Free Software Foundation; either version 2.1 of the License, or
## any later version.
##
## This library is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
## MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
## documentation provided hereunder is on an "as is" basis, and the
## California Institute of Technology and Japan Science and Technology
## Corporation have no obligations to provide maintenance, support,
## updates, enhancements or modifications.  In no event shall the
## California Institute of Technology or the Japan Science and Technology
## Corporation be liable to any party for direct, indirect, special,
## incidental or consequential damages, including lost profits, arising
## out of the use of this software and its documentation, even if the
## California Institute of Technology and/or Japan Science and Technology
## Corporation have been advised of the possibility of such damage.  See
## the GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library; if not, write to the Free Software Foundation,
## Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
##
## The original code contained here was initially developed by:
##
##     Ben Bornstein
##     SBML Team
##     Control and Dynamical Systems, MC 107-81
##     California Institute of Technology
##     Pasadena, CA, 91125, USA
##
##     http://www.sbml.org
##     mailto:sbml-team@caltech.edu
##
## Contributor(s):
##   Michael Hucka <mhucka@caltech.edu> Wrote this Makefile.in.
##

# -----------------------------------------------------------------------------
# Configuration variables
# -----------------------------------------------------------------------------
# Some of the following are substituted automatically by `configure'.  If
# you are looking at "Makefile", do not edit these values; instead, run the
# configure script at the top level of the src tree.  It will recreate
# "Makefile".

include @top_srcdir@/config/makefile-common-vars.mk

# `srcdir' points to the current directory, but should be set by configure.
# `subdir' must be set manually to the relative dir under `srcdir'.  Don't 
# set `subdir' to an absolute path, or some `make' actions will fail.

srcdir  = @srcdir@
thisdir = src

headers = \
  sbml/ASTNode.h                    \
  sbml/ASTNode.hpp                  \
  sbml/ASTNodeType.h                \
  sbml/AlgebraicRule.h              \
  sbml/AlgebraicRule.hpp            \
  sbml/AssignmentRule.h             \
  sbml/AssignmentRule.hpp           \
  sbml/Compartment.h                \
  sbml/Compartment.hpp              \
  sbml/CompartmentVolumeRule.h      \
  sbml/CompartmentVolumeRule.hpp    \
  sbml/Event.h                      \
  sbml/Event.hpp                    \
  sbml/EventAssignment.h            \
  sbml/EventAssignment.hpp          \
  sbml/FormulaFormatter.h           \
  sbml/FormulaParser.h              \
  sbml/FormulaTokenizer.h           \
  sbml/FunctionDefinition.h         \
  sbml/FunctionDefinition.hpp       \
  sbml/KineticLaw.h                 \
  sbml/KineticLaw.hpp               \
  sbml/List.h                       \
  sbml/List.hpp                     \
  sbml/ListOf.h                     \
  sbml/ListOf.hpp                   \
  sbml/MathMLDocument.h             \
  sbml/MathMLDocument.hpp           \
  sbml/MathMLFormatter.hpp          \
  sbml/MathMLHandler.hpp            \
  sbml/MathMLReader.h               \
  sbml/MathMLTagCodes.hpp           \
  sbml/MathMLUnicodeConstants.hpp   \
  sbml/MathMLWriter.h               \
  sbml/Model.h                      \
  sbml/Model.hpp                    \
  sbml/ModifierSpeciesReference.h   \
  sbml/ModifierSpeciesReference.hpp \
  sbml/Parameter.h                  \
  sbml/Parameter.hpp                \
  sbml/ParameterRule.h              \
  sbml/ParameterRule.hpp            \
  sbml/ParseMessage.h               \
  sbml/ParseMessage.hpp             \
  sbml/RateRule.h                   \
  sbml/RateRule.hpp                 \
  sbml/Reaction.h                   \
  sbml/Reaction.hpp                 \
  sbml/Rule.h                       \
  sbml/Rule.hpp                     \
  sbml/RuleType.h                   \
  sbml/SBMLConvert.h                \
  sbml/SBMLDocument.h               \
  sbml/SBMLDocument.hpp             \
  sbml/SBMLFormatter.hpp            \
  sbml/SBMLHandler.hpp              \
  sbml/SBMLReader.h                 \
  sbml/SBMLReader.hpp               \
  sbml/SBMLTagCodes.hpp             \
  sbml/SBMLTypeCodes.h              \
  sbml/SBMLTypes.h                  \
  sbml/SBMLTypes.hpp                \
  sbml/SBMLUnicodeConstants.hpp     \
  sbml/SBMLWriter.h                 \
  sbml/SBase.h                      \
  sbml/SBase.hpp                    \
  sbml/SimpleSpeciesReference.h     \
  sbml/SimpleSpeciesReference.hpp   \
  sbml/Species.h                    \
  sbml/Species.hpp                  \
  sbml/SpeciesConcentrationRule.h   \
  sbml/SpeciesConcentrationRule.hpp \
  sbml/SpeciesReference.h           \
  sbml/SpeciesReference.hpp         \
  sbml/Stack.h                      \
  sbml/StringBuffer.h               \
  sbml/StringMap.h                  \
  sbml/Unit.h                       \
  sbml/Unit.hpp                     \
  sbml/UnitDefinition.h             \
  sbml/UnitDefinition.hpp           \
  sbml/UnitKind.h                   \
  sbml/Validator.h                  \
  sbml/XMLSchemaValidation.h        \
  sbml/XMLStringFormatter.hpp       \
  sbml/XMLUnicodeConstants.hpp      \
  sbml/XMLUtil.hpp                  \
  sbml/common.h                     \
  sbml/common.hpp                   \
  sbml/config.h                     \
  sbml/extern.h                     \
  sbml/memory.h                     \
  sbml/util.h

sources = \
  ASTNode.cpp                     \
  AlgebraicRule.cpp               \
  AssignmentRule.cpp              \
  Compartment.cpp                 \
  CompartmentVolumeRule.cpp       \
  Event.cpp                       \
  EventAssignment.cpp             \
  FormulaFormatter.c              \
  FormulaParser.c                 \
  FormulaTokenizer.c              \
  FunctionDefinition.cpp          \
  KineticLaw.cpp                  \
  List.cpp                        \
  ListOf.cpp                      \
  MathMLDocument.cpp              \
  MathMLFormatter.cpp             \
  MathMLHandler.cpp               \
  MathMLReader.cpp                \
  MathMLTagCodes.cpp              \
  MathMLWriter.cpp                \
  Model.cpp                       \
  ModifierSpeciesReference.cpp    \
  Parameter.cpp                   \
  ParameterRule.cpp               \
  ParseMessage.cpp                \
  RateRule.cpp                    \
  Reaction.cpp                    \
  Rule.cpp                        \
  RuleType.c                      \
  SBMLConvert.c                   \
  SBMLDocument.cpp                \
  SBMLFormatter.cpp               \
  SBMLHandler.cpp                 \
  SBMLReader.cpp                  \
  SBMLTagCodes.cpp                \
  SBMLWriter.cpp                  \
  SBase.cpp                       \
  SimpleSpeciesReference.cpp      \
  Species.cpp                     \
  SpeciesConcentrationRule.cpp    \
  SpeciesReference.cpp            \
  Stack.c                         \
  StringBuffer.c                  \
  StringMap.c                     \
  Unit.cpp                        \
  UnitDefinition.cpp              \
  UnitKind.c                      \
  ValidationRules.c               \
  Validator.c                     \
  XMLStringFormatter.cpp          \
  XMLUtil.cpp                     \
  memory.c                        \
  util.c

ifeq "$(USE_LIBCHECK)" "1"
testrunner_headers = \
  sbml/SAX2AttributesMock.hpp

testrunner_sources = \
  SAX2AttributesMock.cpp          \
  TestMathMLFormatter.cpp         \
  TestMathMLHandler.cpp           \
  TestSAX2AttributesMock.cpp      \
  TestXMLStringFormatter.cpp      \
  TestXMLUtil.cpp                 \
  TestAlgebraicRule.c             \
  TestAssignmentRule.c            \
  TestASTNode.c                   \
  TestCompartment.c               \
  TestCompartmentVolumeRule.c     \
  TestConsistencyChecks.cpp       \
  TestEvent.c                     \
  TestEventAssignment.c           \
  TestFormulaFormatter.c          \
  TestFormulaParser.c             \
  TestFormulaTokenizer.c          \
  TestFunctionDefinition.c        \
  TestKineticLaw.c                \
  TestList.c                      \
  TestListOf.c                    \
  TestMathMLDocument.c            \
  TestMathMLWriter.c              \
  TestMemory.c                    \
  TestModel.c                     \
  TestModifierSpeciesReference.c  \
  TestParameter.c                 \
  TestParameterRule.c             \
  TestParseMessage.c              \
  TestRateRule.c                  \
  TestReaction.c                  \
  TestReadFromFile1.c             \
  TestReadFromFile2.c             \
  TestReadFromFile3.c             \
  TestReadFromFile4.c             \
  TestRule.c                      \
  TestRuleType.c                  \
  TestRunner.c                    \
  TestSBase.cpp                   \
  TestSBMLConvert.c               \
  TestSBMLDocument.c              \
  TestSBMLFormatter.cpp           \
  TestSBMLHandler.cpp             \
  TestSBMLReader.c                \
  TestSBMLWriter.c                \
  TestSimpleSpeciesReference.c    \
  TestSpecies.c                   \
  TestSpeciesConcentrationRule.c  \
  TestSpeciesReference.c          \
  TestStack.c                     \
  TestStringBuffer.c              \
  TestStringMap.c                 \
  TestUnitDefinition.c            \
  TestUnitKind.c                  \
  TestUnit.c                      \
  TestUtil.c                      \
  TestValidator.c
endif

# Variables `subdirs', `headers', `sources', `libraries', `extra_CPPFLAGS',
# `extra_CXXFLAGS', `extra_LDFLAGS' and `distfiles' are used by the default
# rules in `makefile-common-actions.mk' included at the end.

libraries = $(PACKAGE).a $(PACKAGE).$(SHAREDLIBEXT)

ifeq "$(USE_LIBCHECK)" "1"
  check_programs   = TestRunner
  extra_CPPFLAGS  += $(LIBCHECK_CPPFLAGS)
  extra_CXXFLAGS  += $(LIBCHECK_CPPFLAGS)
  extra_LDFLAGS   += $(LIBCHECK_LDFLAGS)
  extra_LIBS      += $(LIBCHECK_LIBS)
  extra_clean     += $(check_programs)
endif

ifeq "$(USE_EXPAT)" "1"
  extra_CPPFLAGS  += $(EXPAT_CPPFLAGS) -I../expat
  extra_CXXFLAGS  += $(EXPAT_CPPFLAGS) -I../expat
  extra_LDFLAGS   += $(EXPAT_LDFLAGS) -L../expat
  extra_LIBS      += $(EXPAT_LIBS) -lexpat-compat
else
  extra_CPPFLAGS  += $(XERCES_CPPFLAGS)
  extra_CXXFLAGS  += $(XERCES_CPPFLAGS)
  extra_LDFLAGS   += $(XERCES_LDFLAGS)
  extra_LIBS      += $(XERCES_LIBS)
endif

# `distfiles' determines the files and directories included in a distribution.
# `distfiles_exclude' is used to filter out specific items, so that even if
# they appear in `distfiles', they will not be copied in the distribution.

distfiles = $(sources) $(headers) $(testrunner_headers) \
	sbml/config.h.in Makefile.in

distfiles_exclude = sbml/config.h


# -----------------------------------------------------------------------------
# Primary build actions
# -----------------------------------------------------------------------------

# The default action is to remake everything.  Those rules which are not
# defined below are defined in makefile-common-actions.mk.

all: Makefile $(libraries)

check: all run-checks

dvi:

pdf:

ps:

info:

html:


# -----------------------------------------------------------------------------
# Targets for checking/testing.
# -----------------------------------------------------------------------------

# The makefile directives for check tend to have to be specific to each source
# directory and not abstracted into `makefile-common-actions.mk'.

ifeq "$(USE_LIBCHECK)" "1"
  testrunner_tmplist  = $(testrunner_sources:.cpp=.$(OBJEXT)) \
			$(testrunner_sources:.c=.$(OBJEXT))
  testrunner_objfiles = $(filter %.$(OBJEXT),$(testrunner_tmplist))

  # The .Po dependency files do not need to be included explicitly here, as
  # makefile-common-actions.mk includes them using a wildcard.

endif

$(check_programs): $(testrunner_objfiles) $(libraries)
	$(CXX) $(CXXFLAGS) $(DEFS) $(extra_CXXFLAGS) $(default_includes) \
	  $(INCLUDES) $(testrunner_objfiles) $(objfiles) $(extra_LDFLAGS) \
	  $(LIBS) $(extra_LIBS) -o $@

run-checks:: $(check_programs)
	@echo
	@echo Running Tests
	@echo -------------
	@list='$(check_programs)'; for test in $$list; do \
	  export srcdir=@TestDataDirectory@; \
	  echo ""; \
	  echo "Running \"$$test\""; \
	  ./$$test; \
	  echo ""; \
	done;


# -----------------------------------------------------------------------------
# Installation
# -----------------------------------------------------------------------------

install: install-libraries

uninstall: uninstall-libraries

installcheck: installcheck-libraries


# -----------------------------------------------------------------------------
# Creating distribution (for libSBML maintainers only)
# -----------------------------------------------------------------------------

dist: dist-normal

distcheck: distcheck-normal


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

include @top_srcdir@/config/makefile-common-actions.mk


# -----------------------------------------------------------------------------
# End.
# -----------------------------------------------------------------------------
