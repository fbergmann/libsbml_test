	/** @cond doxygen-libsbml-internal */

/**
 * @file:   LayoutConsistencyConstraints.cpp
 * @brief:  Implementation of the LayoutConsistencyConstraints class
 * @author: Generated by autocreate code
 *
 * <!--------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright (C) 2009-2013 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
 *
 * Copyright (C) 2006-2008 by the California Institute of Technology,
 *     Pasadena, CA, USA 
 *
 * Copyright (C) 2002-2005 jointly by the following organizations:
 *     1. California Institute of Technology, Pasadena, CA, USA
 *     2. Japan Science and Technology Agency, Japan
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * ------------------------------------------------------------------------ -->
 */

#ifndef  AddingConstraintsToValidator

#include <sbml/validator/VConstraint.h>

#include <sbml/packages/layout/validator/LayoutSBMLError.h>
#include <sbml/packages/layout/common/LayoutExtensionTypes.h>
#include <sbml/packages/layout/extension/LayoutSBMLDocumentPlugin.h>

#endif  /* AddingConstrainstToValidator */

#include <sbml/validator/ConstraintMacros.h>

/** @cond doxygen-ignored */

using namespace std;

/** @endcond */

//20315
START_CONSTRAINT (LayoutLayoutMustHaveDimensions, Layout, l)
{
  bool fail = false;

  if (l.getDimensionsExplicitlySet() == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT

//20406
START_CONSTRAINT (LayoutGOMetaIdRefMustReferenceObject, GraphicalObject, go)
{
  pre(go.isSetMetaIdRef() == true);

  bool fail = false;

  const LayoutSBMLDocumentPlugin * plug = 
                            static_cast<const LayoutSBMLDocumentPlugin*>
                            (go.getSBMLDocument()->getPlugin("layout"));

  if (plug->getMetaidList().contains(go.getMetaIdRef()) == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT


//20407
START_CONSTRAINT (LayoutGOMustContainBoundingBox, GraphicalObject, go)
{
  bool fail = false;

  if (go.getBoundingBoxExplicitlySet() == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT

//20506
START_CONSTRAINT (LayoutCGMetaIdRefMustReferenceObject, CompartmentGlyph, glyph)
{
  pre(glyph.isSetMetaIdRef() == true);

  bool fail = false;

  const LayoutSBMLDocumentPlugin * plug = 
                            static_cast<const LayoutSBMLDocumentPlugin*>
                            (glyph.getSBMLDocument()->getPlugin("layout"));

  if (plug->getMetaidList().contains(glyph.getMetaIdRef()) == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT

//20606
START_CONSTRAINT (LayoutSGMetaIdRefMustReferenceObject, SpeciesGlyph, glyph)
{
  pre(glyph.isSetMetaIdRef() == true);

  bool fail = false;

  const LayoutSBMLDocumentPlugin * plug = 
                            static_cast<const LayoutSBMLDocumentPlugin*>
                            (glyph.getSBMLDocument()->getPlugin("layout"));

  if (plug->getMetaidList().contains(glyph.getMetaIdRef()) == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT

//20706
START_CONSTRAINT (LayoutRGMetaIdRefMustReferenceObject, ReactionGlyph, glyph)
{
  pre(glyph.isSetMetaIdRef() == true);

  bool fail = false;

  const LayoutSBMLDocumentPlugin * plug = 
                            static_cast<const LayoutSBMLDocumentPlugin*>
                            (glyph.getSBMLDocument()->getPlugin("layout"));

  if (plug->getMetaidList().contains(glyph.getMetaIdRef()) == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT

//20806
START_CONSTRAINT (LayoutGGMetaIdRefMustReferenceObject, GeneralGlyph, glyph)
{
  pre(glyph.isSetMetaIdRef() == true);

  bool fail = false;

  const LayoutSBMLDocumentPlugin * plug = 
                            static_cast<const LayoutSBMLDocumentPlugin*>
                            (glyph.getSBMLDocument()->getPlugin("layout"));

  if (plug->getMetaidList().contains(glyph.getMetaIdRef()) == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT

//20906
START_CONSTRAINT (LayoutTGMetaIdRefMustReferenceObject, TextGlyph, glyph)
{
  pre(glyph.isSetMetaIdRef() == true);

  bool fail = false;

  const LayoutSBMLDocumentPlugin * plug = 
                            static_cast<const LayoutSBMLDocumentPlugin*>
                            (glyph.getSBMLDocument()->getPlugin("layout"));

  if (plug->getMetaidList().contains(glyph.getMetaIdRef()) == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT

//20106
START_CONSTRAINT (LayoutSRGMetaIdRefMustReferenceObject, 
                                        SpeciesReferenceGlyph, glyph)
{
  pre(glyph.isSetMetaIdRef() == true);

  bool fail = false;

  const LayoutSBMLDocumentPlugin * plug = 
                            static_cast<const LayoutSBMLDocumentPlugin*>
                            (glyph.getSBMLDocument()->getPlugin("layout"));

  if (plug->getMetaidList().contains(glyph.getMetaIdRef()) == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT


//20116
START_CONSTRAINT (LayoutREFGMetaIdRefMustReferenceObject, ReferenceGlyph, glyph)
{
  pre(glyph.isSetMetaIdRef() == true);

  bool fail = false;

  const LayoutSBMLDocumentPlugin * plug = 
                            static_cast<const LayoutSBMLDocumentPlugin*>
                            (glyph.getSBMLDocument()->getPlugin("layout"));

  if (plug->getMetaidList().contains(glyph.getMetaIdRef()) == false)
  {
    fail = true;
  }

  inv(fail == false);
}
END_CONSTRAINT



	/** @endcond doxygen-libsbml-internal */


