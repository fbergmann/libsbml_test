## @configure_input@
##
## @file    Makefile.in
## @brief   Makefile template for libSBML Python bindings
## @author  Mike Hucka
## @author  Akija Jouraku
## 
## $Id$
## $HeadURL$
##
##<!---------------------------------------------------------------------------
## This file is part of libSBML.  Please visit http://sbml.org for more
## information about SBML, and the latest version of libSBML.
##
## Copyright 2005-2010 California Institute of Technology.
## Copyright 2002-2005 California Institute of Technology and
##                     Japan Science and Technology Corporation.
## 
## This library is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation.  A copy of the license agreement is provided
## in the file named "LICENSE.txt" included with this software distribution
## and also available online as http://sbml.org/software/libsbml/license.html
##----------------------------------------------------------------------- -->*/


# -----------------------------------------------------------------------------
# Configuration variables
# -----------------------------------------------------------------------------
# Some of the following are substituted automatically by `configure'.  If
# you are looking at "Makefile", do not edit these values; instead, run the
# configure script at the top level of the src tree.  It will recreate
# "Makefile".

include @top_srcdir@/config/makefile-common-vars.mk

# `srcdir' points to the current directory, but should be set by configure.
# `subdir' must be set manually to the relative dir under srcdir.  Don't 
# set `subdir' to an absolute path, or some make actions will fail.

srcdir  = @srcdir@
thisdir = src/bindings/python

# `sources' are used by the default rules to determine what needs to be
# compiled.

sources = libsbml.py libsbml_wrap.cpp

# What we're building is a module for use with Python.
# The leading underscore below is a Python convention.

libraries = _libsbml.$(PYTHON_EXT)

#############################################################################
#
# Generates _libsbml.$(PYTHON_EXT) (C++ library for Python bindings) with
# an object file in this directory (libsbml_wrap.o) and other object files
# in sub directories in 'src' directory (src/sbml, src/common, ... ) instead
# of linking a shared library of libSBML (libsbml.$(SHAREDLIBEXT)).
#

#
# All directories that contain *.{c,cpp} (implementation) files of libSBML need
# to be listed in the following 'otherdirs' variable.
#
otherdirs = ../../common ../../util ../../xml ../../math ../../validator \
            ../../validator/constraints ../../units ../../annotation ../../compress \
            ../../sbml

ifdef USE_LAYOUT
  otherdirs += ../../sbml/layout
endif

objfiles  = libsbml_wrap.lo $(wildcard $(addsuffix /*.lo,$(otherdirs)))


#############################################################################

# Environment variable MACOSX_DEPLOYMENT_TARGET must be set to 10.3 or later
# to use -undefined dynamic_lookup.

ifeq "$(HOST_TYPE)" "darwin"
  export MACOSX_DEPLOYMENT_TARGET=$(MACOS_VERSION)
%.so: $(objfiles)
	$(call link_dl_lib,$@)
endif

# If we're building 64-bit binaries, but are not running under 10.6, the 
# version of python will probably be 32 bit instead of 64 bit.

ifdef USE_UNIVBINARY
  ifneq "$(MACOS_VERSION)" "10.6"

    filtered_cflags   = $(shell echo '$(CFLAGS)'   | sed -e "s/-arch x86_64//g")
    filtered_cppflags = $(shell echo '$(CPPFLAGS)' | sed -e "s/-arch x86_64//g")
    filtered_cxxflags = $(shell echo '$(CXXFLAGS)' | sed -e "s/-arch x86_64//g")
    filtered_ldflags  = $(shell echo '$(LDFLAGS)'  | sed -e "s/-arch x86_64//g")
    
    CFLAGS   := $(filtered_cflags)
    CPPFLAGS := $(filtered_cppflags)
    CXXFLAGS := $(filtered_cxxflags)
    LDFLAGS  := $(filtered_ldflags)
    
  endif
endif

# Variables `subdirs', `headers', `sources', `libraries', `extra_CPPFLAGS',
# `extra_CXXFLAGS', `extra_LDFLAGS' and `distfiles' are used by the default
# rules in `makefile-common-actions.mk' included at the end.

extra_CPPFLAGS += $(PYTHON_CPPFLAGS) -I../swig -I../../../include
SWIGFLAGS      += $(PYTHON_CPPFLAGS) -I../swig

ifdef USE_LAYOUT
  SWIGFLAGS += -DUSE_LAYOUT
  extra_CPPFLAGS += -DUSE_LAYOUT
endif # USE_LAYOUT  

# On MacOS X, compilation generates a warning about `long double'.

ifeq "$(HOST_TYPE)" "darwin"
  ifdef HAS_GCC_WNO_LONG_DOUBLE
    extra_CPPFLAGS += -Wno-long-double
  endif
endif

extra_LDFLAGS  = $(PYTHON_LDFLAGS) 
extra_LIBS     = $(PYTHON_LIBS)

ifdef USE_EXPAT
  extra_CPPFLAGS += @EXPAT_CPPFLAGS@ 
  extra_LDFLAGS  += @EXPAT_LDFLAGS@
  extra_LIBS     += @EXPAT_LIBS@
endif

ifdef USE_XERCES
  extra_CPPFLAGS += @XERCES_CPPFLAGS@
  extra_LDFLAGS  += @XERCES_LDFLAGS@
  extra_LIBS     += @XERCES_LIBS@
endif

ifdef USE_LIBXML
  extra_CPPFLAGS += @LIBXML_CPPFLAGS@
  extra_LDFLAGS  += @LIBXML_LDFLAGS@
  extra_LIBS     += @LIBXML_LIBS@
endif

# -fno-strict-aliasing option is added to CXXFLAGS when using GCC.
# As written in the SWIG Manual (section 20.2.4), SWIG generated code could cause
# crash problems when compiled by GCC with -fstrict-aliasing option (automatically
# enabled when using -O2 or higher optimization in GCC 3 or later) and the option
# should be disabled by adding -fno-strict-aliasing option.

ifeq (GCC,$(findstring GCC,$(shell $(CXX) --version)))
      CXXFLAGS += -fno-strict-aliasing
endif

# For Linux/Unix LD_LIBRARY_PATH *may* need to contain one or more library
# paths to libsbml.so, libxerces-c.so and/or libexpat.so and/or the
# libsbml.so _libsbml.so generated by this Makfile.  (For BSD/MacOS X
# replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH.)

# `distfiles' determines the files and directories included in a distribution.
# `distfiles_exclude' is used to filter out specific items, so that even if
# they appear in `distfiles', they will not be copied in the distribution.

distfiles =                                     \
            Makefile.in                         \
            test.py                             \
            layout_local.i                      \
            libsbml.i                           \
            libsbml.py                          \
            libsbml_wrap.cpp                    \
            local.cpp                           \
            local.i                             \
            setup.cfg                           \
            setup.py.in                         \
            $(python_test_files)

python_test_path = test
python_test_files = $(wildcard $(python_test_path)/**/Test*.py)

extra_clean     = build $(python_test_files:.py=.pyc) $(wildcard test.xml.*)
extra_distclean = libsbml.pyc setup.py


# -----------------------------------------------------------------------------
# Primary build actions
# -----------------------------------------------------------------------------

.SUFFIXES:
.SUFFIXES: .i .cpp .py .pyc .pyo .o .obj .lo .la

# The default action is to remake everything.

all: Makefile swig-prereq $(libraries)

# The libSBML Python API library on MacOS X has to be built as a "bundle"
# rather than a .dylib library.  This is different from the default rules
# used elsewhere in libSBML and requires the following special value for
# `platform_link_flags'.  The rest of the default rules for .so's will
# behave properly once this is set.

ifeq "$(HOST_TYPE)" "darwin"
  platform_link_flags = -bundle
endif

# The following is for developers and maintainers.  Recipients of the
# library distributions shouldn't have to run SWIG because we provide the
# wrapper file ready-made.  This is only enabled if configure is given the
# --with-swig flag.

swig_sources = \
	  ../swig/libsbml.h \
	  ../swig/libsbml.i

ifdef USE_LAYOUT
  swig_sources += ../swig/layout.i
endif

ifdef USE_SWIG
# If swig is enabled, always rebuild the swig wrapper files.

swig-prereq:
	$(MAKE) swigfiles

else # not USE_SWIG

# If the last run was made with --enable-layout and this one isn't, or
# vice-versa, the swig wrap files will be wrong for this run.  However, you
# can't tell just by looking at file mod times, so you can't use normal
# make dependencies.  So we do this grungy trick of looking at the file to
# see what's inside.

swig-prereq:
ifdef USE_LAYOUT
	@if test -z "`grep SWIGTYPE_p_Layout libsbml_wrap.cpp`"; then \
	  $(MAKE) swigfiles; \
	else \
	  $(MAKE) libsbml_wrap.cpp libsbml.py; \
	fi
else # not USE_LAYOUT
	@if test -n "`grep SWIGTYPE_p_Layout libsbml_wrap.cpp`"; then \
	  $(MAKE) swigfiles; \
	else \
	  $(MAKE) libsbml_wrap.cpp libsbml.py; \
	fi
endif # USE_LAYOUT

endif # USE_SWIG

# The next target is for forcing re-swigging.

#
# (NOTE: 2009-08-15) 
#
# In SWIG 1.3.39, a compilation error can happen in SWIG-generated code 
# (libsbml_wrap.cpp) when built with Python 3.x on 64bit platform.
# To avoid this problem, a cast code (int* -> Py_ssize_t*) is added
# to the 3rd argument of PyBytes_AsStringAndSize() function call
# in the file by using sed command in the following ifdef USE_SWIG
# block.
#
# (2009-08-18: The above problem has been fixed in SWIG 1.3.40)
#

swigfiles:
	@top_srcdir@/config/chk_swig_version.sh || exit
	../swig/swigdoc.py python -I../.. -D../../../docs/src ../swig/libsbml.i pydoc.i
	$(SWIG) $(SWIGFLAGS) \
	        $(sort $(default_includes) $(INCLUDES)) \
		-c++ -python -o libsbml_wrap.cpp libsbml.i
	mv libsbml.py libsbml.pyc
	echo 'from __future__ import generators' > libsbml.py
	cat libsbml.pyc >> libsbml.py
	if $(SWIG) -version | grep -q '1.3.39' ; then \
	  mv libsbml_wrap.cpp libsbml_wrap.cpp.org; \
	  sed -e \
	  's/PyBytes_AsStringAndSize(str, \&cstr, \&len);/PyBytes_AsStringAndSize(str, \&cstr, (Py_ssize_t*)\&len);/' \
	  libsbml_wrap.cpp.org > libsbml_wrap.cpp; \
	fi 	

# The following are the normal dependency rules.

libsbml_wrap.cpp libsbml.py: $(swig_sources)
	$(MAKE) swigfiles

setup.py: setup.py.in
	cd $(TOP_BUILDDIR) && $(SHELL) ./config.status $(thisdir)/setup.py


# -----------------------------------------------------------------------------
# Checking.
# -----------------------------------------------------------------------------

test_subdir_path = test/sbml:test/xml:test/annotation:test/math
ifdef USE_LIBCHECK
  check: $(libraries)
	@echo
	@echo
	@echo Running Tests in $(thisdir)
	@echo -----------------------------------------------------------------
	$(call libsbmlrun, env PYTHONPATH=.:$(test_subdir_path) $(PYTHON) ./test.py)
	@echo -----------------------------------------------------------------
	@echo All tests passed
	@echo
else
  check:; @echo Please first rerun 'configure' with the --with-check flag; exit 1
endif


# -----------------------------------------------------------------------------
# Tags.
# -----------------------------------------------------------------------------

tags: etags ctags


# -----------------------------------------------------------------------------
# Installation.
# -----------------------------------------------------------------------------

# Take account of DESDIR if it was assigned when the make was invoked

ifneq "$(DESTDIR)" ""
  root = --root "$(DESTDIR)"
endif

installed_files_list = installed-files.txt

# In order to avoid MACOSX_DEPLOYMENT_TARGET mismatch error on Mac OS X,
# environment variable MACOSX_DEPLOYMENT_TARGET is set to '' at
# install-time.  Python distutils sets proper value to
# MACOSX_DEPLOYMENT_TARGET if the environment variable is set to ''.

ifeq (, $(shell $(PYTHON) setup.py install --help | grep "\--install-layout.*known values: deb")) 
  install-cmd = setup.py install --record $(installed_files_list) --skip-build --prefix=$(prefix) $(root)
else
  install-cmd = setup.py install --record $(installed_files_list) --skip-build --install-layout=deb --prefix=$(prefix) $(root)
endif

install: setup.py create-build-dir
ifeq "$(HOST_TYPE)" "darwin"
	env MACOSX_DEPLOYMENT_TARGET='' $(PYTHON) $(install-cmd)
else
	$(PYTHON) $(install-cmd)
endif

create-build-dir: $(libraries)
	mkdir -p build build/libsbml
	echo "libsbml" > build/libsbml.pth
	cp $(libraries)  build/libsbml
	cp libsbml.py    build/libsbml

installcheck:

uninstall: 
	for i in `cat $(installed_files_list)`; do \
	  d=`dirname $$i`; f=`echo $$i | sed 's,.*/,,'`; \
	  find $$d -name "$$f" -o -name "libsbml.pth" | xargs -t /bin/rm -f ; \
	done ; \


# -----------------------------------------------------------------------------
# Creating distribution (for libSBML maintainers only)
# -----------------------------------------------------------------------------

dist: libsbml_wrap.cpp dist-normal

distcheck: distcheck-normal


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

include @top_srcdir@/config/makefile-common-actions.mk


# -----------------------------------------------------------------------------
# End.
# -----------------------------------------------------------------------------
