## @configure_input@
##
## \file    Makefile.in
## \brief   Makefile template for libsbml Python bindings
## \author  Mike Hucka
## 
## $Id$
## $Source$
##

## Copyright 2004 California Institute of Technology and
## Japan Science and Technology Corporation.
##
## This library is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as published
## by the Free Software Foundation; either version 2.1 of the License, or
## any later version.
##
## This library is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
## MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
## documentation provided hereunder is on an "as is" basis, and the
## California Institute of Technology and Japan Science and Technology
## Corporation have no obligations to provide maintenance, support,
## updates, enhancements or modifications.  In no event shall the
## California Institute of Technology or the Japan Science and Technology
## Corporation be liable to any party for direct, indirect, special,
## incidental or consequential damages, including lost profits, arising
## out of the use of this software and its documentation, even if the
## California Institute of Technology and/or Japan Science and Technology
## Corporation have been advised of the possibility of such damage.  See
## the GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library; if not, write to the Free Software Foundation,
## Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
##
## The original code contained here was initially developed by:
##
##     Ben Bornstein and Ben Kovitz
##     SBML Team
##     Control and Dynamical Systems, MC 107-81
##     California Institute of Technology
##     Pasadena, CA, 91125, USA
##
##     http://www.sbml.org
##     mailto:sbml-team@caltech.edu
##
## Contributor(s):
##   Michael Hucka <mhucka@caltech.edu> Wrote this Makefile.in.
##


# -----------------------------------------------------------------------------
# Configuration variables
# -----------------------------------------------------------------------------
# Some of the following are substituted automatically by `configure'.  If
# you are looking at "Makefile", do not edit these values; instead, run the
# configure script at the top level of the src tree.  It will recreate
# "Makefile".

include @top_srcdir@/config/makefile-common-vars.mk

# `srcdir' points to the current directory, but should be set by configure.
# `subdir' must be set manually to the relative dir under srcdir.  Don't 
# set `subdir' to an absolute path, or some make actions will fail.

srcdir  = @srcdir@
thisdir = src/bindings/python

# `sources' are used by the default rules to determine what needs to be
# compiled.

sources = libsbml.py libsbml_wrap.cpp

# What we're building is a module for use with Python.
# The leading underscore below is a Python convention.

ifeq "$(HOST_TYPE)" "darwin"
  # MacOS X note: this MUST remain .so even though we use .dylib for libsbml.
  libraries = _libsbml.so
else
  libraries = _libsbml.$(SHAREDLIBEXT)
endif

# Variables `subdirs', `headers', `sources', `libraries', `extra_CPPFLAGS',
# `extra_CXXFLAGS', `extra_LDFLAGS' and `distfiles' are used by the default
# rules in `makefile-common-actions.mk' included at the end.

extra_CPPFLAGS = $(PYTHON_CPPFLAGS) -I../swig -I../..
SWIGFLAGS += $(PYTHON_CPPFLAGS) -I../swig

ifdef USE_LAYOUT
  SWIGFLAGS += -DUSE_LAYOUT
  extra_CPPFLAGS += -DUSE_LAYOUT
endif # USE_LAYOUT  

# On MacOS X, compilation generates a warning about `long double'.

ifeq "$(HOST_TYPE)" "darwin"
  extra_CPPFLAGS += -Wno-long-double
endif

extra_LDFLAGS  = $(PYTHON_LDFLAGS)
extra_LIBS     = -L../.. -lsbml $(PYTHON_LIBS)

ifdef USE_EXPAT
  extra_CPPFLAGS += @EXPAT_CPPFLAGS@ 
  extra_LDFLAGS  += @EXPAT_LDFLAGS@
  extra_LIBS     += @EXPAT_LIBS@
endif

ifdef USE_XERCES
  extra_CPPFLAGS += @XERCES_CPPFLAGS@
  extra_LDFLAGS  += @XERCES_LDFLAGS@
  extra_LIBS     += @XERCES_LIBS@
endif

ifdef USE_LIBXML
  extra_CPPFLAGS += @XERCES_CPPFLAGS@
  extra_LDFLAGS  += @XERCES_LDFLAGS@
  extra_LIBS     += @XERCES_LIBS@
endif

# For Linux/Unix LD_LIBRARY_PATH *may* need to contain one or more library
# paths to libsbml.so, libxerces-c.so and/or libexpat.so and/or the
# libsbml.so _libsbml.so generated by this Makfile.  (For BSD/MacOS X
# replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH.)

# `distfiles' determines the files and directories included in a distribution.
# `distfiles_exclude' is used to filter out specific items, so that even if
# they appear in `distfiles', they will not be copied in the distribution.

distfiles = \
	    Makefile.in \
	    Python_binding_Win32.dsp \
	    README.txt \
	    accept.py \
	    layout_local.i \
	    libsbml.i \
	    libsbml.py \
	    libsbml_wrap.cpp \
	    local.cpp \
	    local.i \
	    setup.cfg \
	    setup.py.in

extra_clean     = build
extra_distclean = libsbml.pyc setup.py


# -----------------------------------------------------------------------------
# Primary build actions
# -----------------------------------------------------------------------------

.SUFFIXES:
.SUFFIXES: .i .cpp .py .pyc .pyo .o .obj

objfiles = libsbml_wrap.$(OBJEXT)
test_objfiles = $(objfiles)

# The default action is to remake everything.

all: Makefile swig-prereq $(libraries)

# The libSBML Python API library on MacOS X has to be built as a "bundle"
# rather than a .dylib library.  This is different from the default rules
# used elsewhere in libSBML and requires the following special value for
# `platform_link_flags'.  The rest of the default rules for .so's will
# behave properly once this is set.

ifeq "$(HOST_TYPE)" "darwin"
  platform_link_flags = -bundle
endif

# The following is for developers and maintainers.  Recipients of the
# library distributions shouldn't have to run SWIG because we provide the
# wrapper file ready-made.  This is only enabled if configure is given the
# --with-swig flag.

swig_sources = \
	  ../swig/libsbml.h \
	  ../swig/libsbml.i

ifdef USE_SWIG
# If swig is enabled, always rebuild the swig wrapper files.

swig-prereq:
	$(MAKE) swigfiles

else # not USE_SWIG

# If USE_SWIG is *not* in effect, things get tricky.  If the last run was
# made with --enable-layout and this one isn't, or vice-versa, the swig
# wrap files will be wrong for this run.  However, you can't tell just by
# looking at file mod times, so you can't use normal make dependencies.  So
# we do this grungy trick of looking at the file to see what's inside.

ifdef USE_LAYOUT
swig-prereq:
	@if test -z "`grep SWIGTYPE_p_Layout libsbml_wrap.cpp`"; then \
	  echo "The existing libsbml_wrap.cpp file lacks the layout code."; \
	  echo "Reconfigure --with-swig --enable-layout to correct this."; \
	  exit 1; \
	else \
	  $(MAKE) libsbml_wrap.cpp libsbml.py; \
	fi

else # not USE_LAYOUT
swig-prereq:
	@if test -n "`grep SWIGTYPE_p_Layout libsbml_wrap.cpp`"; then \
	  $(MAKE) swigfiles; \
	else \
	  $(MAKE) libsbml_wrap.cpp libsbml.py; \
	fi
endif # USE_LAYOUT
endif # USE_SWIG

# The next target is for forcing re-swigging.

swigfiles:
ifdef USE_SWIG
	../swig/swigdoc.py python -I../.. ../swig/libsbml.i pydoc.i
	$(SWIG) $(SWIGFLAGS) -I../.. -c++ -python -o libsbml_wrap.cpp libsbml.i
	perl -pi -e "s|import _libsbml|from __future__ import generators\nimport _libsbml|" \
		libsbml.py
else
	echo "Reconfigure --with-swig in order to rebuild libsbml_wrap.cpp"
	exit 1
endif

# The following are the normal dependency rules.

libsbml_wrap.cpp libsbml.py: $(swig_sources)
	$(MAKE) swigfiles

setup.py: setup.py.in
	cd $(TOP_BUILDDIR) && $(SHELL) ./config.status $(thisdir)/setup.py


# -----------------------------------------------------------------------------
# Checking.
# -----------------------------------------------------------------------------

ifdef USE_LIBCHECK
  check: $(libraries)
	@echo
	@echo
	@echo Running Tests in $(thisdir)
	@echo -----------------------------------------------------------------
	$(call libsbmlrun,$(PYTHON) accept.py)
	@echo -----------------------------------------------------------------
	@echo
else
  check:; @echo Please first rerun 'configure' with the --with-check flag; exit 1
endif


# -----------------------------------------------------------------------------
# Formatting documentation.
# -----------------------------------------------------------------------------

dvi:

pdf:

ps:

info:

html:


# -----------------------------------------------------------------------------
# Tags.
# -----------------------------------------------------------------------------

tags: etags ctags


# -----------------------------------------------------------------------------
# Installation.
# -----------------------------------------------------------------------------

install: setup.py create-build-dir
	$(PYTHON) setup.py install --skip-build --prefix=$(prefix)

installcheck:

create-build-dir: $(libraries)
	mkdir -p build build/libsbml
	echo "libsbml" > build/libsbml.pth
	cp $(libraries)  build
	cp libsbml.py    build/libsbml

uninstall: setup.py
	$(PYTHON) setup.py uninstall --prefix=$(prefix)


# -----------------------------------------------------------------------------
# Creating distribution (for libSBML maintainers only)
# -----------------------------------------------------------------------------

dist: libsbml_wrap.cpp dist-normal

distcheck: distcheck-normal


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

include @top_srcdir@/config/makefile-common-actions.mk


# -----------------------------------------------------------------------------
# End.
# -----------------------------------------------------------------------------
