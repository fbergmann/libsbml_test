## @configure_input@
##
## Filename    : Makefile.in
## Description : Makefile template for libsbml Python bindings
## Author(s)   : SBML Team <sbml-team@caltech.edu>
## Organization: California Institute of Technology
## Created     : 2004-06-17
## Revision    : $Id$
## Source      : $Source$
##
## Copyright 2004 California Institute of Technology and
## Japan Science and Technology Corporation.
##
## This library is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as published
## by the Free Software Foundation; either version 2.1 of the License, or
## any later version.
##
## This library is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
## MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
## documentation provided hereunder is on an "as is" basis, and the
## California Institute of Technology and Japan Science and Technology
## Corporation have no obligations to provide maintenance, support,
## updates, enhancements or modifications.  In no event shall the
## California Institute of Technology or the Japan Science and Technology
## Corporation be liable to any party for direct, indirect, special,
## incidental or consequential damages, including lost profits, arising
## out of the use of this software and its documentation, even if the
## California Institute of Technology and/or Japan Science and Technology
## Corporation have been advised of the possibility of such damage.  See
## the GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with this library; if not, write to the Free Software Foundation,
## Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
##
## The original code contained here was initially developed by:
##
##     Ben Bornstein and Ben Kovitz
##     SBML Team
##     Control and Dynamical Systems, MC 107-81
##     California Institute of Technology
##     Pasadena, CA, 91125, USA
##
##     http://www.sbml.org
##     mailto:sbml-team@caltech.edu
##
## Contributor(s):
##   Michael Hucka <mhucka@caltech.edu> Wrote this Makefile.in.
##


# -----------------------------------------------------------------------------
# Configuration variables
# -----------------------------------------------------------------------------
# Some of the following are substituted automatically by `configure'.  If
# you are looking at "Makefile", do not edit these values; instead, run the
# configure script at the top level of the src tree.  It will recreate
# "Makefile".

include @top_srcdir@/config/makefile-common-vars.mk

# `srcdir' points to the current directory, but should be set by configure.
# `subdir' must be set manually to the relative dir under srcdir.  Don't 
# set `subdir' to an absolute path, or some make actions will fail.

srcdir  = @srcdir@
thisdir = bindings/java

# `sources' are used by the default rules to determine what needs to be
# compiled.  `added_sources' are other source files local to this directory
# that need to be distributed but not compiled.

sources = \
          libsbml_wrap.cpp

extra_sources = \
	  libsbml.i \
	  local.cpp \
	  local.i \
	  Test.java

check_sources  = Test.java

java_package   = org.sbml.$(PACKAGE)
jarfile        = libsbmlj.jar
jnifile        = libsbmlj.$(JNIEXT)

# There are two libraries to build: the shared JNI library, and the Jar file.

libraries      = $(jarfile) $(jnifile)

# Variables `subdirs', `headers', `sources', `libraries', `extra_CPPFLAGS',
# `extra_CXXFLAGS', `extra_LDFLAGS' and `distfiles' are used by the default
# rules in `makefile-common-actions.mk' included at the end.

extra_CPPFLAGS = $(JAVA_CPPFLAGS) -I../swig -I../../src

extra_LDFLAGS  = $(JAVA_LDFLAGS)

extra_LIBS     = -L../../src -lsbml $(JAVA_LIBS)

ifdef USE_EXPAT
  extra_CPPFLAGS += $(EXPAT_CPPFLAGS)
  extra_LDFLAGS  += $(EXPAT_LDFLAGS) -L../../expat
  extra_LIBS     += $(EXPAT_LIBS)
else
  extra_CPPFLAGS += $(XERCES_CPPFLAGS)
  extra_LDFLAGS  += $(XERCES_LDFLAGS)
  extra_LIBS     += $(XERCES_LIBS)
endif

# For Linux/Unix LD_LIBRARY_PATH *may* need to contain one or more library
# paths to libsbml.so, libxerces-c.so and/or libexpat.so and/or the
# libsbml.so _libsbml.so generated by this Makfile.  (For BSD/MacOS X
# replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH.)

# The next set of variable definitions are special to this file and not
# hooks into `makefile-common-actions.mk'.  The values depend in part on
# Java conventions and the output of SWIG.

outdir      = java-files
pkg_path    = $(subst .,/,$(java_package))
outpath     = $(outdir)/$(pkg_path)
java_files  = $(wildcard $(outpath)/*.java)
class_files = $(java_files:.java=.class)

# `distfiles' determines the files and directories included in a
# distribution.  The strategy here is that we include the output of SWIG
# (both libsbml_wrap.cpp and the java files) but not the compiled class
# files.

distfiles = $(sources) $(extra_sources) $(check_sources) Makefile.in $(java_files)

# `extra_clean' and `extra_distclean' determine the files and directories
# removed during "make clean" and "make distclean".

extra_clean = $(class_files) $(check_sources:.java=.class)

extra_distclean = java-files


# -----------------------------------------------------------------------------
# Primary build actions
# -----------------------------------------------------------------------------

# This whole setup is more or less custom and mostly doesn't use the common
# build directives of `makefile-common-actions.mk'.

.SUFFIXES:
.SUFFIXES: .i .cpp .hpp .java .class .jar .o .obj .so .dylib

objfiles = libsbml_wrap.$(OBJEXT)

# The default action is to remake everything.  Those rules which are not
# defined below are defined in makefile-common-actions.mk.

all: Makefile $(libraries)

# The dependencies that follow are an awful tangle.  I wish I could find a
# way to simplify this.  The critical point is that we don't want to put a
# list naming all the .java files explicitly in this Makefile, because any
# change to the output of SWIG could cause a change in the .java files it
# produces and render obsolete any list contained here.  So we have to try
# to wildcard the files, but that in itself is impossible until they're
# generated by running SWIG.  Ugh.

$(jarfile): libsbml_wrap.cpp java-files $(class_files)
ifeq "$(java_files)" ""
	$(MAKE) dummy_create_class_files
endif
	$(CD) $(outdir) && \
	   $(JAR) -cvf ../$(jarfile) $(pkg_path)/*.class

$(outpath):
	$(shell [ -d $(outpath) ] || mkdir -p $(outpath))

$(class_files): $(outpath)/%.class: $(outpath)/%.java
	$(JAVAC) -d $(outdir) $(outpath)/*.java

dummy_create_class_files: libsbml_wrap.cpp java-files $(class_files)

# MacOS X is different.  We need to compile the .jnilib files using -bundle.

ifeq "$(HOST_TYPE)" "darwin"
  platform_link_flags = -bundle
endif

# The following is for developers and maintainers.  Recipients of the
# library distributions shouldn't have to run SWIG because we provide the
# wrapper file ready-made.  This is only enabled if configure is given the
# --with-swig flag.

swig_sources = \
	../swig/libsbml.hpp \
	../swig/libsbml.i

libsbml_wrap.cpp java-files: $(swig_sources) ../../src/sbml/*.hpp
ifndef USE_SWIG
	@echo "Please reconfigure with --with-swig to rebuild libsbml_wrap.cpp"
	@echo "and the files in the java-files directory."
	exit 1
else
	test -d $(outpath) || mkdir -p $(outpath)
	$(SWIG) $(SWIGFLAGS) $(extra_CPPFLAGS) -I../../src -outdir $(outpath) \
	   -c++ -java -package $(java_package) -o libsbml_wrap.cpp libsbml.i
endif


# -----------------------------------------------------------------------------
# Checking.
# -----------------------------------------------------------------------------

ifdef USE_LIBCHECK
  check: all run-checks
else
  check:; @echo Please first rerun 'configure' with the --with-check flag; exit 1
endif

check_classes = $(check_sources:.java=.class)

classpath = $(jarfile):$(TOP_BUILDDIR)/src:.

$(check_classes): Makefile $(libraries) $(check_sources)
	$(JAVAC) -g -classpath $(classpath) $(check_sources)

run-checks: $(check_classes)
	$(call libsbmlrun,$(JAVA) -classpath $(classpath) Test)


# -----------------------------------------------------------------------------
# Formatting documentation.
# -----------------------------------------------------------------------------

dvi:

pdf:

ps:

info:

html:


# -----------------------------------------------------------------------------
# Installation.
# -----------------------------------------------------------------------------

install: $(libraries)
	@list='$(libraries)'; for lib in $$list; do \
	  echo "$(INSTALL) $$lib $(DESTDIR)$(LIBDIR)"; \
	  $(INSTALL) $$lib $(DESTDIR)$(LIBDIR); \
	done;

uninstall:

installcheck:


# -----------------------------------------------------------------------------
# Creating distribution (for libSBML maintainers only)
# -----------------------------------------------------------------------------

dist: libsbml_wrap.cpp java-files dist-normal

distcheck: distcheck-normal


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

include @top_srcdir@/config/makefile-common-actions.mk


# -----------------------------------------------------------------------------
# End.
# -----------------------------------------------------------------------------
