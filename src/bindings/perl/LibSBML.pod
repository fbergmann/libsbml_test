=head1 NAME

LibSBML  -- interface to the libSBML library

=head1 SYNOPSIS

  use File::Spec;
  use LibSBML;
  use strict;

  my $file     = File::Spec->rel2abs('FOO.xml');
  my $reader   = new LibSBML::SBMLReader;
  my $document = $rd->readSBML($file);
  my $model    = $document->getModel();
  ... 

=head1 DESCRIPTION

The LibSBML.pm package gives access to almost all functions in libSBML
(http://sbml.org). The Perl wrapper is generated using SWIG
http://www.swig.org/ with relatively little manual intervention.

=head1 AUTHORS

 Christoph Flamm <xtof@tbi.univie.ac.at>
 Rainer Machne   <raim@tbi.univie.ac.at>

=head1 FUNCTION INDEX

=over 8

=item SBMLReader::SBMLReader

Creates a new SBMLReader and returns it. By default schema validation is off (XML_SCHEMA_VALIDATION_NONE) and schemaFilenames are empty.

=item SBMLReader::getSchemaFilenameL1v1

Returns the schema filename used by this SBMLReader to validate SBML Level 1 version 1 documents.

=item SBMLReader::getSchemaFilenameL1v2

Returns the schema filename used by this SBMLReader to validate SBML Level 1 version 2 documents.

=item SBMLReader::getSchemaFilenameL2v1

Returns the schema filename used by this SBMLReader to validate SBML Level 2 version 1 documents.

=item SBMLReader::getSchemaValidationLevel

Sets the schema validation level used by this SBMLReader.

=item SBMLReader::readSBML

Reads an SBML document from the given file. Returns a pointer to the SBMLDocument read or NULL if the given file does not exist.

=item SBMLReader::readSBMLFromString

Reads an SBML document from the given XML string. The XML string must be complete and legal XML document. Among other things, it must start with an XML processing instruction. For e.g.,: <?xml version='1.0' encoding='UTF-8'?> Returns a pointer to the SBMLDocument read.

=item SBMLReader::setSchemaFilenameL1v1

Sets the schema filename used by this SBMLReader to validate SBML Level 1 version 1 documents. The filename should be either i) an absolute path or ii) relative to the directory contain the SBML file(s) to be read.

=item SBMLReader::setSchemaFilenameL1v2

Sets the schema filename used by this SBMLReader to validate SBML Level 1 version 2 documents. The filename should be either i) an absolute path or ii) relative to the directory contain the SBML file(s) to be read.

=item SBMLReader::setSchemaFilenameL2v1

Sets the schema filename used by this SBMLReader to validate SBML Level 2 version 1 documents. The filename should be either i) an absolute path or ii) relative to the directory contain the SBML file(s) to be read.

=item SBMLReader::setSchemaValidationLevel

Sets the schema validation level used by this SBMLReader. The levels are: XML_SCHEMA_VALIDATION_NONE (0) turns schema validation off. XML_SCHEMA_VALIDATION_BASIC (1) validates an XML instance document against an XML Schema. Those who wish to perform schema checking on SBML documents should use this option. XML_SCHEMA_VALIDATION_FULL (2) validates both the instance document itself and the XML Schema document. The XML Schema document is checked for violation of particle unique attribution constraints and particle derivation restrictions, which is both time-consuming and memory intensive.

=item readSBML

Reads an SBML document from the given file. This convenience function is functionally equivalent to: SBMLReader_readSBML(SBMLReader_create(), filename); Returns a pointer to the SBMLDocument read or NULL if the given file does not exist.

=item readSBMLFromString

Reads an SBML document from the given XML string. The XML string must be complete and legal XML document. Among other things, it must start with an XML processing instruction. For e.g.,: <?xml version='1.0' encoding='UTF-8'?> This convenience function is functionally equivalent to: SBMLReader_readSBMLFromString(SBMLReader_create(), filename); Returns a pointer to the SBMLDocument read or NULL if the given XML string is NULL.

=item SBMLWriter::SBMLWriter

Creates a new SBMLWriter.

=item SBMLWriter::setProgramName

Sets the name of this program, i.e. the one about to write out the SBMLDocument. If the program name and version are set (setProgramVersion()), the following XML comment, intended for human consumption, will be written at the beginning of the document: <!-- Created by <program name> version <program version> on yyyy-MM-dd HH:mm with libsbml version <libsbml version>. -->

=item SBMLWriter::setProgramVersion

Sets the version of this program, i.e. the one about to write out the SBMLDocument. If the program version and name are set (setProgramName()), the following XML comment, intended for human consumption, will be written at the beginning of the document: <!-- Created by <program name> version <program version> on yyyy-MM-dd HH:mm with libsbml version <libsbml version>. -->

=item SBMLWriter::write

Writes the given SBML document to filename. Returns true on success and false if the filename could not be opened for writing.

=item SBMLWriter::write

Writes the given SBML document to the output stream. Returns true on success and false if one of the underlying Xerces or Expat components fail (rare).

=item SBMLWriter::writeToString

Writes the given SBML document to an in-memory string and returns a pointer to it. The string is owned by the caller and should be freed (with free()) when no longer needed. Returns the string on success and 0 if one of the underlying Xerces or Expat components fail (rare).

=item writeSBML

Writes the given SBML document to filename. This convenience function is functionally equivalent to: SBMLWriter_writeSBML(SBMLWriter_create(), d, filename); Returns non-zero on success and zero if the filename could not be opened for writing.)

=item writeSBMLToString

Writes the given SBML document to an in-memory string and returns a pointer to it. The string is owned by the caller and should be freed (with free()) when no longer needed. This convenience function is functionally equivalent to: SBMLWriter_writeSBMLToString(SBMLWriter_create(), d); Returns the string on success and NULL if one of the underlying Xerces or Expat components fail (rare).

=item SBase::init

SBase 'objects' are abstract, i.e., they are not created. Rather, specific 'subclasses' are created (e.g., Model) and their SBASE_FIELDS are initialized with this function. The type of the specific 'subclass' is indicated by the given SBMLTypeCode.

=item SBase::getTypeCode



=item SBase::getColumn



=item SBase::getLine



=item SBase::getMetaId



=item SBase::getNotes



=item SBase::getAnnotation



=item SBase::getNamespaces

Returns a list of XML namespaces defined on this SBML object.

=item SBase::hasNamespaces

Returns true if this SBML object has any XML namespaces defined on it, false otherwise.

=item SBase::isSetMetaId



=item SBase::isSetNotes



=item SBase::isSetAnnotation



=item SBase::setMetaId



=item SBase::setNotes



=item SBase::setAnnotation



=item SBase::toSBML

Returns the partial SBML that describes this SBML object.

=item SBase::unsetMetaId



=item SBase::unsetNotes



=item SBase::unsetAnnotation



=item ListOf::ListOf

Creates a new ListOf.

=item ListOf::accept

Accepts the given SBMLVisitor.

=item ListOf::append

Adds item to the end of this List.

=item ListOf::countIf

Returns the number of items in this List for which predicate(item) returns true. The typedef for ListItemPredicate is: int (ListItemPredicate) (const void item); where a return value of non-zero represents true and zero represents false.

=item ListOf::find

Returns the first occurrence of item1 in this List or NULL if item was not found. ListItemComparator is a pointer to a function used to find item. The typedef for ListItemComparator is: int (ListItemComparator) (const void item1, const void item2); The return value semantics are the same as for strcmp: -1 item1 E<lt> item2, 0 item1 == item 2 1 item1 E<gt> item2

=item ListOf::get

Returns the nth item in this List. If n E<gt> ListOf.getNumItems() returns 0.

=item ListOf::getNumItems

Returns the number of items in this List.

=item ListOf::prepend

Adds item to the beginning of this ListOf.

=item ListOf::remove

Removes the nth item from this List and returns a pointer to it. If n E<gt> ListOf.getNumItems() returns 0.

=item Model::Model

Creates a new Model, optionally with its id and name attributes set.

=item Model::accept

Accepts the given SBMLVisitor.

=item Model::getId

Returns the id of this Model.

=item Model::getName

Returns the name of this Model.

=item Model::isSetId

Returns true if the id of this Model has been set, false otherwise.

=item Model::isSetName

Returns true if the name of this Model has been set, false otherwise.

=item Model::moveAllIdsToNames

Moves the id field to the name field for this Model and all of its contituent UnitDefinitions, Compartments, Species, Parameters, and Reactions. This method is used for converting from L2 to L1. NOTE: Any object with its name field already set will be skipped. @see moveIdToName

=item Model::moveAllNamesToIds

Moves the name field to the id field for this Model and all of its contituent UnitDefinitions, Compartments, Species, Parameters, and Reactions. This method is used for converting from L1 to L2. NOTE: Any object with its id field already set will be skipped. @see moveNameToId

=item Model::moveIdToName

Moves the id field of this Model to its name field (iff name is not already set). This method is used for converting from L2 to L1.

=item Model::moveNameToId

Moves the name field of this Model to its id field (iff id is not already set). This method is used for converting from L1 to L2.

=item Model::setId

Sets the id of this Model to a copy of sid.

=item Model::setName

Sets the name of this Model to a copy of string (SName in L1).

=item Model::unsetId

Unsets the id of this Model.

=item Model::unsetName

Unsets the name of this Model.

=item Model::createFunctionDefinition

Creates a new FunctionDefinition inside this Model and returns it. This covenience method is equivalent to: addFunctionDefinition( FunctionDefinition() );

=item Model::createUnitDefinition

Creates a new UnitDefinition inside this Model and returns it. This covenience method is equivalent to: addUnitDefinition( UnitDefinition() );

=item Model::createUnit

Creates a new Unit inside this Model and returns a pointer to it. The Unit is added to the last UnitDefinition created. If a UnitDefinitions does not exist for this model, a new Unit is not created and NULL is returned.

=item Model::createCompartment

Creates a new Compartment inside this Model and returns it. This covenience method is equivalent to: addCompartment( Compartment() );

=item Model::createSpecies

Creates a new Species inside this Model and returns . This covenience method is equivalent to: addSpecies( Species() );

=item Model::createParameter

Creates a new Parameter inside this Model and returns. This covenience method is equivalent to: addParameter( Parameter() );

=item Model::createAssignmentRule

Creates a new AssignmentRule inside this Model and returns . This covenience method is equivalent to: addRule( AssignmentRule() ); (L2 only)

=item Model::createRateRule

Creates a new RateRule inside this Model and returns it. This covenience method is equivalent to: addRule( RateRule() ); (L2 only)

=item Model::createAlgebraicRule

Creates a new AlgebraicRule inside this Model and returns it. This covenience method is equivalent to: addRule( AlgebraicRule() );

=item Model::createCompartmentVolumeRule

Creates a new CompartmentVolumeRule inside this Model and returns. This covenience method is equivalent to: addRule( CompartmentVolumeRule() );

=item Model::createParameterRule

Creates a new ParameterRule inside this Model and returns it. This covenience method is equivalent to: addRule( ParameterRule() );

=item Model::createSpeciesConcentrationRule

Creates a new SpeciesConcentrationRule inside this Model and returns it. This covenience method is equivalent to: addRule( SpeciesConcentrationRule() );

=item Model::createReaction

Creates a new Reaction inside this Model and returns. This covenience method is equivalent to: addReaction( Reaction() );

=item Model::createReactant

Creates a new Reactant (i.e. SpeciesReference) inside this Model and returns a pointer to it. The SpeciesReference is added to the reactants of the last Reaction created. If a Reaction does not exist for this model, a new SpeciesReference is not created and NULL is returned.

=item Model::createProduct

Creates a new Product (i.e. SpeciesReference) inside this Model and returns a pointer to it. The SpeciesReference is added to the products of the last Reaction created. If a Reaction does not exist for this model, a new SpeciesReference is not created and NULL is returned.

=item Model::createModifier

Creates a new Modifer (i.e. ModifierSpeciesReference) inside this Model and returns a pointer to it. The ModifierSpeciesReference is added to the modifiers of the last Reaction created. If a Reaction does not exist for this model, a new ModifierSpeciesReference is not created and NULL is returned.

=item Model::createKineticLaw

Creates a new KineticLaw inside this Model and returns a pointer to it. The KineticLaw is associated with the last Reaction created. If a Reaction does not exist for this model, or a Reaction does exist, but already has a KineticLaw, a new KineticLaw is not created and NULL is returned.

=item Model::createKineticLawParameter

Creates a new Parameter (of a KineticLaw) inside this Model and returns a pointer to it. The Parameter is associated with the KineticLaw of the last Reaction created. If a Reaction does not exist for this model, or a KineticLaw for the Reaction, a new Parameter is not created and NULL is returned.

=item Model::createEvent

Creates a new Event inside this Model and returns. This covenience function is functionally equivalent to: addEvent( Event() );

=item Model::createEventAssignment

Creates a new EventAssignment inside this Model and returns a pointer to it. The EventAssignment is added to the the last Event created. If an Event does not exist for this model, a new EventAssignment is not created and NULL is returned.

=item Model::addFunctionDefinition

Adds the given FunctionDefinition to this Model.

=item Model::addUnitDefinition

Adds the given UnitDefinition to this Model.

=item Model::addCompartment

Adds the given Compartment to this Model.

=item Model::addSpecies

Adds the given Species to this Model.

=item Model::addParameter

Adds the given Parameter to this Model.

=item Model::addRule

Adds the given Rule to this Model.

=item Model::addReaction

Adds the given Reaction to this Model.

=item Model::addEvent

Adds the given Event to this Model.

=item Model::getListOfFunctionDefinitions

Returns the list of FunctionDefinitions for this Model.

=item Model::getListOfFunctionDefinitions

Returns the list of FunctionDefinitions for this Model.

=item Model::getListOfUnitDefinitions

Returns the list of UnitDefinitions for this Model.

=item Model::getListOfUnitDefinitions

Returns the list of UnitDefinitions for this Model.

=item Model::getListOfCompartments

Returns the list of Compartments for this Model.

=item Model::getListOfCompartments

Returns the list of Compartments for this Model.

=item Model::getListOfSpecies

Returns the list of Species for this Model.

=item Model::getListOfSpecies

Returns the list of Species for this Model.

=item Model::getListOfParameters

Returns the list of Parameters for this Model.

=item Model::getListOfParameters

Returns the list of Parameters for this Model.

=item Model::getListOfRules

Returns the list of Rules for this Model.

=item Model::getListOfRules

Returns the list of Rules for this Model.

=item Model::getListOfReactions

Returns the list of Rules for this Model.

=item Model::getListOfReactions

Returns the list of Rules for this Model.

=item Model::getListOfEvents

Returns the list of Rules for this Model.

=item Model::getListOfEvents

Returns the list of Rules for this Model.

=item Model::getFunctionDefinition

Returns the nth FunctionDefinition of this Model.

=item Model::getFunctionDefinition

Returns the FunctionDefinition in this Model with the given id or NULL if no such FunctionDefinition exists.

=item Model::getUnitDefinition

Returns the nth UnitDefinition of this Model.

=item Model::getUnitDefinition

Returns the UnitDefinition in this Model with the given id or NULL if no such UnitDefinition exists.

=item Model::getCompartment

Returns the nth Compartment of this Model.

=item Model::getCompartment

Returns the Compartment in this Model with the given id or NULL if no such Compartment exists.

=item Model::getSpecies

Returns the nth Species of this Model.

=item Model::getSpecies

Returns the Species in this Model with the given id or NULL if no such Species exists.

=item Model::getParameter

Returns the nth Parameter of this Model.

=item Model::getParameter

Returns the Parameter in this Model with the given id or NULL if no such Parameter exists.

=item Model::getRule

Returns the nth Rule of this Model.

=item Model::getReaction

Returns the nth Reaction of this Model.

=item Model::getReaction

Returns the Reaction in this Model with the given id or NULL if no such Reaction exists.

=item Model::getEvent

Returns the nth Event of this Model.

=item Model::getEvent

Returns the Event in this Model with the given id or NULL if no such Event exists.

=item Model::getNumFunctionDefinitions

Returns the number of FunctionDefinitions in this Model.

=item Model::getNumUnitDefinitions

Returns the number of UnitDefinitions in this Model.

=item Model::getNumCompartments

Returns the number of Compartments in this Model.

=item Model::getNumSpecies

Returns the number of Species in this Model.

=item Model::getNumSpeciesWithBoundaryCondition

Returns the number of Species in this Model with boundaryCondition set to true.

=item Model::getNumParameters

Returns the number of Parameters in this Model. Parameters defined in KineticLaws are not included.

=item Model::getNumRules

Returns the number of Rules in this Model.

=item Model::getNumReactions

Returns the number of Reactions in this Model.

=item Model::getNumEvents

Returns the number of Events in this Model.

=item SBMLDocument::SBMLDocument

Creates a new SBMLDocument. The SBML level defaults to 2 and version defaults to 1.

=item SBMLDocument::accept

Accepts the given SBMLVisitor.

=item SBMLDocument::createModel

Creates a new Model (optionally with its Id attribute set) inside this SBMLDocument and returns it. This covenience method is equivalent to: setModel( Model() );

=item SBMLDocument::getLevel

Returns the level of this SBMLDocument.

=item SBMLDocument::getVersion

Returns the version of this SBMLDocument.

=item SBMLDocument::getModel

Returns the Model associated with this SBMLDocument.

=item SBMLDocument::getWarning

Returns the nth warning encountered during the parse of this SBMLDocument or NULL if n E<gt> getNumWarnings() - 1.

=item SBMLDocument::getError

Returns the nth error encountered during the parse of this SBMLDocument or NULL if n E<gt> getNumErrors() - 1.

=item SBMLDocument::getFatal

Returns the nth fatal error encountered during the parse of this SBMLDocument or NULL if n E<gt> getNumFatals() - 1.

=item SBMLDocument::getNumWarnings

Returns the number of warnings encountered during the parse of this SBMLDocument.

=item SBMLDocument::getNumErrors

Returns the number of errors encountered during the parse of this SBMLDocument.

=item SBMLDocument::getNumFatals

Returns the number of fatal errors encountered during the parse of this SBMLDocument.

=item SBMLDocument::printWarnings

Prints all warnings encountered during the parse of this SBMLDocument to the given stream. If no warnings have occurred, i.e. getNumWarnings() == 0, no output will be sent to stream. The format of the output is: N Warning(s): line: (id) message

=item SBMLDocument::printErrors

Prints all errors encountered during the parse of this SBMLDocument to the given stream. If no errors have occurred, i.e. getNumErrors() == 0, no output will be sent to stream. The format of the output is: N Error(s): line: (id) message

=item SBMLDocument::printFatals

Prints all fatals encountered during the parse of this SBMLDocument to the given stream. If no fatals have occurred, i.e. getNumFatals() == 0, no output will be sent to stream. The format of the output is: N Fatal(s): line: (id) message

=item SBMLDocument::setLevel

Sets the level of this SBMLDocument to the given level number. Valid levels are currently 1 and 2.

=item SBMLDocument::setVersion

Sets the version of this SBMLDocument to the given version number. Valid versions are currently 1 and 2 for SBML L1 and 1 for SBML L2.

=item SBMLDocument::setModel

Sets the Model of this SBMLDocument to the given Model. Any previously defined model is unset and freed.

=item SBMLDocument::checkConsistency

Performs a set of semantic consistency checks on the document. Query the results by calling getWarning(), getNumError(),and getNumFatal(). Returns the number of failed checks (errors) encountered.

=item SBMLDocument::validate

@deprecated use checkConsistency() instead.

=item SBMLDocument::checkL1Compatibility

Performs a set of semantic consistency checks on the document to establish whether it is compatible with L1 and can be converted. Query the results by calling getWarning(), getNumError(),and getNumFatal(). Returns the number of failed checks (errors) encountered.

=item FunctionDefinition::FunctionDefinition

Creates a new FunctionDefinition, optionally with its id and math attributes set.

=item FunctionDefinition::FunctionDefinition

Creates a new FunctionDefinition, optionally with its id and math attributes set. Creates a new FunctionDefinition, optionally with its id and math (via an infix formula string) attributes set.

=item FunctionDefinition::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next FunctionDefinition (if available).

=item FunctionDefinition::getId

Returns the id of this FunctionDefinition.

=item FunctionDefinition::getName

Returns the name of this FunctionDefinition.

=item FunctionDefinition::getMath

Returns the math of this FunctionDefinition.

=item FunctionDefinition::isSetId

Returns true if the id of this FunctionDefinition has been set, false otherwise.

=item FunctionDefinition::isSetName

Returns true if the name of this FunctionDefinition has been set, false otherwise.

=item FunctionDefinition::isSetMath

Returns true if the math of this FunctionDefinition has been set, false otherwise.

=item FunctionDefinition::setId

Sets the id of this FunctionDefinition to a copy of sid.

=item FunctionDefinition::setName

Sets the name of this FunctionDefinition to a copy of string.

=item FunctionDefinition::setMath

Sets the math of this FunctionDefinition to the given ASTNode. The node B<is not copied> and this FunctionDefinition B<takes ownership> of it; i.e. subsequent calls to this function or a call to FunctionDefinition_free() will free the ASTNode (and any child nodes).

=item FunctionDefinition::unsetName

Unsets the name of this FunctionDefinition.

=item Unit::Unit

Creates a new Unit, optionally with its kind, exponent, scale, multiplier, and offset attributes set.

=item Unit::Unit

Creates a new Unit, optionally with its kind (via string), exponent, scale, multiplier, and offset attributes set.

=item Unit::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the UnitDefinition's next Unit (if available).

=item Unit::initDefaults

Initializes the fields of this Unit to their defaults: - exponent = 1 - scale = 0 - multiplier = 1.0 - offset = 0.0

=item Unit::getKind

Returns the kind of this Unit.

=item Unit::getExponent

Returns the exponent of this Unit.

=item Unit::getScale

Returns the scale of this Unit.

=item Unit::getMultiplier

Returns the multiplier of this Unit.

=item Unit::getOffset

Returns the offset of this Unit.

=item Unit::isAmpere

Returns true if the kind of this Unit is 'ampere', false otherwise.

=item Unit::isBecquerel

Returns true if the kind of this Unit is 'becquerel', false otherwise.

=item Unit::isCandela

Returns true if the kind of this Unit is 'candela', false otherwise.

=item Unit::isCelsius

Returns true if the kind of this Unit is 'Celsius', false otherwise.

=item Unit::isCoulomb

Returns true if the kind of this Unit is 'coulomb', false otherwise.

=item Unit::isDimensionless

Returns true if the kind of this Unit is 'dimensionless', false otherwise.

=item Unit::isFarad

Returns true if the kind of this Unit is 'farad', false otherwise.

=item Unit::isGram

Returns true if the kind of this Unit is 'gram', false otherwise.

=item Unit::isGray

Returns true if the kind of this Unit is 'gray', false otherwise.

=item Unit::isHenry

Returns true if the kind of this Unit is 'henry', false otherwise.

=item Unit::isHertz

Returns true if the kind of this Unit is 'hertz', false otherwise.

=item Unit::isItem

Returns true if the kind of this Unit is 'item', false otherwise.

=item Unit::isJoule

Returns true if the kind of this Unit is 'joule', false otherwise.

=item Unit::isKatal

Returns true if the kind of this Unit is 'katal', false otherwise.

=item Unit::isKelvin

Returns true if the kind of this Unit is 'kelvin', false otherwise.

=item Unit::isKilogram

Returns true if the kind of this Unit is 'kilogram', false otherwise.

=item Unit::isLitre

Returns true if the kind of this Unit is 'litre' or 'liter', false otherwise.

=item Unit::isLumen

Returns true if the kind of this Unit is 'lumen', false otherwise.

=item Unit::isLux

Returns true if the kind of this Unit is 'lux', false otherwise.

=item Unit::isMetre

Returns true if the kind of this Unit is 'metre' or 'meter', false otherwise.

=item Unit::isMole

Returns true if the kind of this Unit is 'mole', false otherwise.

=item Unit::isNewton

Returns true if the kind of this Unit is 'newton', false otherwise.

=item Unit::isOhm

Returns true if the kind of this Unit is 'ohm', false otherwise.

=item Unit::isPascal

Returns true if the kind of this Unit is 'pascal', false otherwise.

=item Unit::isRadian

Returns true if the kind of this Unit is 'radian', false otherwise.

=item Unit::isSecond

Returns true if the kind of this Unit is 'second', false otherwise.

=item Unit::isSiemens

Returns true if the kind of this Unit is 'siemens', false otherwise.

=item Unit::isSievert

Returns true if the kind of this Unit is 'sievert', false otherwise.

=item Unit::isSteradian

Returns true if the kind of this Unit is 'steradian', false otherwise.

=item Unit::isTesla

Returns true if the kind of this Unit is 'tesla', false otherwise.

=item Unit::isVolt

Returns true if the kind of this Unit is 'volt', false otherwise.

=item Unit::isWatt

Returns true if the kind of this Unit is 'watt', false otherwise.

=item Unit::isWeber

Returns true if the kind of this Unit is 'weber', false otherwise.

=item Unit::isSetKind

Returns true if the kind of this Unit has been set, false otherwise.

=item Unit::setKind

Sets the kind of this Unit to the given UnitKind.

=item Unit::setExponent

Sets the exponent of this Unit to the given value.

=item Unit::setScale

Sets the scale of this Unit to the given value.

=item Unit::setMultiplier

Sets the multiplier of this Unit to the given value.

=item Unit::setOffset

Sets the offset of this Unit to the given value.

=item Unit::isBuiltIn

Returns true if name is one of the five SBML builtin Unit names ('substance', 'volume', 'area', 'length' or 'time'), false otherwise.

=item Unit::isUnitKind

Returns true if name is a valid UnitKind.

=item UnitDefinition::UnitDefinition

Creates a new UnitDefinition, optionally with its id and name attributes set.

=item UnitDefinition::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next UnitDefinition (if available).

=item UnitDefinition::getId

Returns the id of this UnitDefinition.

=item UnitDefinition::getName

Returns the name of this UnitDefinition.

=item UnitDefinition::isSetId

Returns true if the id of this UnitDefinition has been set, false otherwise.

=item UnitDefinition::isSetName

Returns true if the name of this UnitDefinition has been set, false otherwise. In SBML L1, a UnitDefinition name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item UnitDefinition::isVariantOfArea

Returns true if this UnitDefinition is a variant of the builtin type area, i.e. square metres with only abritrary variations in scale, multiplier, or offset values, false otherwise.

=item UnitDefinition::isVariantOfLength

Returns true if this UnitDefinition is a variant of the builtin type length, i.e. metres with only abritrary variations in scale, multiplier, or offset values, false otherwise.

=item UnitDefinition::isVariantOfSubstance

Returns true if this UnitDefinition is a variant of the builtin type substance, i.e. moles or items with only abritrary variations in scale, multiplier, or offset values, false otherwise.

=item UnitDefinition::isVariantOfTime

Returns true if this UnitDefinition is a variant of the builtin type time, i.e. seconds with only abritrary variations in scale, multiplier, or offset values, false otherwise.

=item UnitDefinition::isVariantOfVolume

Returns true if this UnitDefinition is a variant of the builtin type volume, i.e. litre or cubic metre with only abritrary variations in scale, multiplier, or offset values, false otherwise.

=item UnitDefinition::moveIdToName

Moves the id field of this UnitDefinition to its name field (iff name is not already set). This method is used for converting from L2 to L1.

=item UnitDefinition::moveNameToId

Moves the name field of this UnitDefinition to its id field (iff id is not already set). This method is used for converting from L1 to L2.

=item UnitDefinition::setId

Sets the id of this UnitDefinition to a copy of sid.

=item UnitDefinition::setName

Sets the name of this UnitDefinition to a copy of string (SName in L1).

=item UnitDefinition::unsetName

Unsets the name of this UnitDefinition. In SBML L1, a UnitDefinition name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item UnitDefinition::addUnit

Adds the given Unit to this UnitDefinition.

=item UnitDefinition::getListOfUnits

Returns the list of Units for this UnitDefinition.

=item UnitDefinition::getListOfUnits

Returns the list of Units for this UnitDefinition.

=item UnitDefinition::getUnit

Returns the nth Unit of this UnitDefinition

=item UnitDefinition::getNumUnits

Returns the number of Units in this UnitDefinition.

=item Compartment::Compartment

Creates a new Compartment, optionally with its id attribute set.

=item Compartment::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Compartment (if available).

=item Compartment::initDefaults

Initializes the fields of this Compartment to their defaults: - volume = 1.0 (L1 only) - spatialDimensions = 3 (L2 only) - constant = 1 (true) (L2 only)

=item Compartment::getId

Returns the id of this Compartment.

=item Compartment::getName

Returns the name of this Compartment.

=item Compartment::getSpatialDimensions

Returns the spatialDimensions of this Compartment.

=item Compartment::getSize

Returns the size (volume in L1) of this Compartment.

=item Compartment::getVolume

Returns the volume (size in L2) of this Compartment.

=item Compartment::getUnits

Returns the units of this Compartment.

=item Compartment::getOutside

Returns the outside of this Compartment.

=item Compartment::getConstant

Returns true if this Compartment is constant, false otherwise.

=item Compartment::isSetId

Returns true if the id of this Compartment has been set, false otherwise.

=item Compartment::isSetName

Returns true if the name of this Compartment has been set, false otherwise. In SBML L1, a Compartment name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item Compartment::isSetSize

Returns true if the size (volume in L1) of this Compartment has been set, false otherwise.

=item Compartment::isSetVolume

Returns true if the volume (size in L2) of this Compartment has been set, false otherwise. In SBML L1, a Compartment volume has a default value (1.0) and therefore B<should always be set>. In L2, volume (size) is optional with no default value and as such may or may not be set.

=item Compartment::isSetUnits

Returns true if the units of this Compartment has been set, false otherwise.

=item Compartment::isSetOutside

Returns true if the outside of this Compartment has been set, false otherwise.

=item Compartment::moveIdToName

Moves the id field of this Compartment to its name field (iff name is not already set). This method is used for converting from L2 to L1.

=item Compartment::moveNameToId

Moves the name field of this Compartment to its id field (iff id is not already set). This method is used for converting from L1 to L2.

=item Compartment::setId

Sets the id of this Compartment to a copy of sid.

=item Compartment::setName

Sets the name of this Compartment to a copy of string (SName in L1).

=item Compartment::setSpatialDimensions

Sets the spatialDimensions of this Compartment to value. If value is not one of [0, 1, 2, 3] the function will have no effect (i.e. spatialDimensions will not be set).

=item Compartment::setSize

Sets the size (volume in L1) of this Compartment to value.

=item Compartment::setVolume

Sets the volume (size in L2) of this Compartment to value.

=item Compartment::setUnits

Sets the units of this Compartment to a copy of sid.

=item Compartment::setOutside

Sets the outside of this Compartment to a copy of sid.

=item Compartment::setConstant

Sets the constant field of this Compartment to value.

=item Compartment::unsetName

Unsets the name of this Compartment.

=item Compartment::unsetSize

Unsets the size (volume in L1) of this Compartment.

=item Compartment::unsetVolume

Unsets the volume (size in L2) of this Compartment. In SBML L1, a Compartment volume has a default value (1.0) and therefore B<should always be set>. In L2, volume is optional with no default value and as such may or may not be set.

=item Compartment::unsetUnits

Unsets the units of this Compartment.

=item Compartment::unsetOutside

Unsets the outside of this Compartment.

=item Species::Species

Creates a new Species, optionally with its id attribute set.

=item Species::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Species (if available).

=item Species::initDefaults

Initializes the fields of this Species to their defaults: - boundaryCondition = false - constant = false (L2 only)

=item Species::getId

Returns the id of this Species

=item Species::getName

Returns the name of this Species.

=item Species::getCompartment

Returns the compartment of this Species.

=item Species::getInitialAmount

Returns the initialAmount of this Species.

=item Species::getInitialConcentration

Returns the initialConcentration of this Species.

=item Species::getSubstanceUnits

Returns the substanceUnits of this Species.

=item Species::getSpatialSizeUnits

Returns the spatialSizeUnits of this Species.

=item Species::getUnits

Returns the units of this Species (L1 only).

=item Species::getHasOnlySubstanceUnits

Returns true if this Species hasOnlySubstanceUnits, false otherwise.

=item Species::getBoundaryCondition

Returns the boundaryCondition of this Species.

=item Species::getCharge

Returns the charge of this Species.

=item Species::getConstant

Returns true if this Species is constant, false otherwise.

=item Species::isSetId

Returns true if the id of this Species has been set, false otherwise.

=item Species::isSetName

Returns true if the name of this Species has been set, false otherwise. In SBML L1, a Species name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item Species::isSetCompartment

Returns true if the compartment of this Species has been set, false otherwise.

=item Species::isSetInitialAmount

Returns true if the initialAmount of this Species has been set, false otherwise. In SBML L1, a Species initialAmount is required and therefore B<should always be set>. In L2, initialAmount is optional and as such may or may not be set.

=item Species::isSetInitialConcentration

Returns true if the initialConcentration of this Species has been set, false otherwise.

=item Species::isSetSubstanceUnits

Returns true if the substanceUnits of this Species has been set, false otherwise.

=item Species::isSetSpatialSizeUnits

Returns true if the spatialSizeUnits of this Species has been set, false otherwise.

=item Species::isSetUnits

Returns true if the units of this Species has been set, false otherwise (L1 only).

=item Species::isSetCharge

Returns true if the charge of this Species has been set, false otherwise.

=item Species::moveIdToName

Moves the id field of this Species to its name field (iff name is not already set). This method is used for converting from L2 to L1.

=item Species::moveNameToId

Moves the name field of this Species to its id field (iff id is not already set). This method is used for converting from L1 to L2.

=item Species::setId

Sets the id of this Species to a copy of sid.

=item Species::setName

Sets the name of this Species to a copy of string (SName in L1).

=item Species::setCompartment

Sets the compartment of this Species to a copy of sid.

=item Species::setInitialAmount

Sets the initialAmount of this Species to value and marks the field as set. This method also unsets the initialConentration field.

=item Species::setInitialConcentration

Sets the initialConcentration of this Species to value and marks the field as set. This method also unsets the initialAmount field.

=item Species::setSubstanceUnits

Sets the substanceUnits of this Species to a copy of sid.

=item Species::setSpatialSizeUnits

Sets the spatialSizeUnits of this Species to a copy of sid.

=item Species::setUnits

Sets the units of this Species to a copy of sname (L1 only).

=item Species::setHasOnlySubstanceUnits

Sets the hasOnlySubstanceUnits field of this Species to value.

=item Species::setBoundaryCondition

Sets the boundaryCondition of this Species to value.

=item Species::setCharge

Sets the charge of this Species to value and marks the field as set.

=item Species::setConstant

Sets the constant field of this Species to value.

=item Species::unsetName

Unsets the name of this Species. In SBML L1, a Species name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item Species::unsetInitialAmount

Marks the initialAmount of this Species as unset.

=item Species::unsetInitialConcentration

Unsets the initialConcentration of this Species.

=item Species::unsetSubstanceUnits

Unsets the substanceUnits of this Species.

=item Species::unsetSpatialSizeUnits

Unsets the spatialSizeUnits of this Species.

=item Species::unsetUnits

Unsets the units of this Species (L1 only).

=item Species::unsetCharge

Unsets the charge of this Species.

=item Parameter::Parameter

Creates a new Parameter, optionally with its id attribute set.

=item Parameter::Parameter

Creates a new Parameter, with its id and value attributes set and optionally its units and constant attributes.

=item Parameter::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the parent Model's or KineticLaw's next Parameter (if available).

=item Parameter::initDefaults

Initializes the fields of this Parameter to their defaults: - constant = true (L2 only)

=item Parameter::getId

Returns the id of this Parameter

=item Parameter::getName

Returns the name of this Parameter.

=item Parameter::getValue

Returns the value of this Parameter.

=item Parameter::getUnits

Returns the units of this Parameter.

=item Parameter::getConstant

Returns true if this Parameter is constant, false otherwise.

=item Parameter::isSetId

Returns true if the id of this Parameter has been set, false otherwise.

=item Parameter::isSetName

Returns true if the name of this Parameter has been set, false otherwise. In SBML L1, a Parameter name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item Parameter::isSetValue

Returns true if the value of this Parameter has been set, false otherwise. In SBML L1v1, a Parameter value is required and therefore B<should always be set>. In L1v2 and beyond, a value is optional and as such may or may not be set.

=item Parameter::isSetUnits

Returns true if the units of this Parameter has been set, false otherwise.

=item Parameter::moveIdToName

Moves the id field of this Parameter to its name field (iff name is not already set). This method is used for converting from L2 to L1.

=item Parameter::moveNameToId

Moves the name field of this Parameter to its id field (iff id is not already set). This method is used for converting from L1 to L2.

=item Parameter::setId

Sets the id of this Parameter to a copy of sid.

=item Parameter::setName

Sets the name of this Parameter to a copy of string (SName in L1).

=item Parameter::setValue

Sets the initialAmount of this Parameter to value and marks the field as set.

=item Parameter::setUnits

Sets the units of this Parameter to a copy of sid.

=item Parameter::setConstant

Sets the constant field of this Parameter to value.

=item Parameter::unsetName

Unsets the name of this Parameter. In SBML L1, a Parameter name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item Parameter::unsetValue

Unsets the value of this Parameter. In SBML L1v1, a Parameter value is required and therefore B<should always be set>. In L1v2 and beyond, a value is optional and as such may or may not be set.

=item Parameter::unsetUnits

Unsets the units of this Parameter.

=item Rule::Rule

Creates a new Rule, optionally with its formula attribute set.

=item Rule::Rule

Creates a new Rule with its math attribute set.

=item Rule::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Rule (if available).

=item Rule::getFormula

Returns the formula for this Rule.

=item Rule::getMath

Returns the math for this Rule.

=item Rule::isSetFormula

Returns true if the formula for this Rule has been set, false otherwise.

=item Rule::isSetMath

Returns true if the math for this Rule has been set, false otherwise.

=item Rule::setFormula

Sets the formula of this Rule to a copy of string.

=item Rule::setFormulaFromMath

Sets the formula of this Rule based on the current value of its math field. This convenience method is equivalent to: setFormula( SBML_formulaToString( getMath() )) except you do not need to track and free the value returned by SBML_formulaToString(). If !isSetMath(r), this method has no effect.

=item Rule::setMath

Sets the math of this Rule to the given ASTNode. The node B<is not copied> and this Rule B<takes ownership> of it; i.e. subsequent calls to this method or deleting this Rule will delete the ASTNode (and any child nodes).

=item Rule::setMathFromFormula

Sets the math of this Rule from its current formula string. This convenience method is equivalent to: setMath( SBML_parseFormula( getFormula() )) If !isSetFormula(), this method has no effect.

=item AlgebraicRule::AlgebraicRule

Creates a new AlgebraicRule, optionally with its formula attribute set.

=item AlgebraicRule::AlgebraicRule

Creates a new AlgebraicRule with its math attribute set.

=item AlgebraicRule::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Rule (if available).

=item AssignmentRule::AssignmentRule

Creates a new AssignmentRule.

=item AssignmentRule::AssignmentRule

Creates a new AssignmentRule with its variable, formula, and (optionally) type attributes set.

=item AssignmentRule::AssignmentRule

Creates a new AssignmentRule with its variable, math and (optionally) type attributes set.

=item AssignmentRule::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Rule (if available).

=item AssignmentRule::initDefaults

The function is kept for backward compatibility with the SBML L1 API. Initializes the fields of this AssignmentRule to their defaults: - type = RULE_TYPE_SCALAR

=item AssignmentRule::getType

Returns the type for this AssignmentRule.

=item AssignmentRule::getVariable

Returns the variable for this AssignmentRule.

=item AssignmentRule::isSetVariable

Returns true if the variable of this AssignmentRule has been set, false otherwise.

=item AssignmentRule::setType

Sets the type of this Rule to the given RuleType.

=item AssignmentRule::setVariable

Sets the variable of this AssignmentRule to a copy of sid.

=item RateRule::RateRule

Creates a new RateRule, optionally with its variable and math (via an infix formula string) attributes set.

=item RateRule::RateRule

Creates a new RateRule with its variable and math attributes set.

=item RateRule::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Rule (if available).

=item RateRule::getVariable

Returns the variable for this RateRule.

=item RateRule::isSetVariable

Returns true if the variable of this RateRule has been set, false otherwise.

=item RateRule::setVariable

Sets the variable of this RateRule to a copy of sid.

=item SpeciesConcentrationRule::SpeciesConcentrationRule

Creates a new SpeciesConcentrationRule.

=item SpeciesConcentrationRule::SpeciesConcentrationRule

Creates a new SpeciesConcentrationRule with its species, formula and (optionally) type attributes set.

=item SpeciesConcentrationRule::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Rule (if available).

=item SpeciesConcentrationRule::getSpecies

Returns the species of this SpeciesConcentrationRule.

=item SpeciesConcentrationRule::isSetSpecies

Returns true if the species of this SpeciesConcentrationRule has been set, false otherwise.

=item SpeciesConcentrationRule::setSpecies

Sets the species of this SpeciesConcentrationRule to a copy of sname.

=item CompartmentVolumeRule::CompartmentVolumeRule

Creates a new CompartmentVolumeRule.

=item CompartmentVolumeRule::CompartmentVolumeRule

Creates a new CompartmentVolumeRule with its compartment, formula and (optionally) type attributes set.

=item CompartmentVolumeRule::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Rule (if available).

=item CompartmentVolumeRule::getCompartment

Returns the compartment of this CompartmentVolumeRule.

=item CompartmentVolumeRule::isSetCompartment

Returns true if the compartment of this CompartmentVolumeRule has been set, false otherwise.

=item CompartmentVolumeRule::setCompartment

Sets the compartment of this CompartmentVolumeRule to a copy of sname.

=item ParameterRule::ParameterRule

Creates a new ParameterRule.

=item ParameterRule::ParameterRule

Creates a new ParameterRule with its name, formula and (optionally) type attributes set.

=item ParameterRule::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Rule (if available).

=item ParameterRule::getName

Returns the (Parameter) name for this ParameterRule.

=item ParameterRule::getUnits

Returns the units for this ParameterRule.

=item ParameterRule::isSetName

Returns true if the (Parameter) name for this ParameterRule has been set, false otherwise.

=item ParameterRule::isSetUnits

Returns true if the units for this ParameterRule has been set, false otherwise.

=item ParameterRule::setName

Sets the (Parameter) name for this ParameterRule to a copy of sname.

=item ParameterRule::setUnits

Sets the units for this ParameterRule to a copy of sname.

=item ParameterRule::unsetUnits

Unsets the units for this ParameterRule.

=item Reaction::Reaction

Creates a new Reaction, optionally with its id, KineticLaw, and reversible attributes set.

=item Reaction::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Reaction (if available).

=item Reaction::initDefaults

Initializes the fields of this Reaction to their defaults: - reversible = true - fast = false (L1 only)

=item Reaction::getId

Returns the id of this Reaction.

=item Reaction::getName

Returns the name of this Reaction.

=item Reaction::getKineticLaw

Returns the KineticLaw of this Reaction.

=item Reaction::getReversible

Returns the reversible status of this Reaction.

=item Reaction::getFast

Returns the fast status of this Reaction.

=item Reaction::isSetId

Returns true if the id of this Reaction has been set, false otherwise.

=item Reaction::isSetName

Returns true if the name of this Reaction has been set, false otherwise. In SBML L1, a Reaction name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item Reaction::isSetKineticLaw

Returns true if the KineticLaw of this Reaction has been set, false otherwise.

=item Reaction::isSetFast

Returns true if the fast status of this Reation has been set, false otherwise. In L1, fast is optional with a default of false, which means it is effectively always set. In L2, however, fast is optional with no default value, so it may or may not be set to a specific value.

=item Reaction::moveIdToName

Moves the id field of this Reaction to its name field (iff name is not already set). This method is used for converting from L2 to L1.

=item Reaction::moveNameToId

Moves the name field of this Reaction to its id field (iff id is not already set). This method is used for converting from L1 to L2.

=item Reaction::setId

Sets the id of this Reaction to a copy of sid.

=item Reaction::setName

Sets the name of this Reaction to a copy of string (SName in L1).

=item Reaction::setKineticLaw

Sets the KineticLaw of this Reaction to the given KineticLaw.

=item Reaction::setReversible

Sets the reversible status of this Reaction to value.

=item Reaction::setFast

Sets the fast status of this Reaction to value.

=item Reaction::addReactant

Adds the given reactant (SpeciesReference) to this Reaction.

=item Reaction::addProduct

Adds the given product (SpeciesReference) to this Reaction.

=item Reaction::addModifier

Adds the given modifier (ModifierSpeciesReference) to this Reaction.

=item Reaction::getListOfReactants

Returns the list of Reactants for this Reaction.

=item Reaction::getListOfReactants

Returns the list of Reactants for this Reaction.

=item Reaction::getListOfProducts

Returns the list of Products for this Reaction.

=item Reaction::getListOfProducts

Returns the list of Products for this Reaction.

=item Reaction::getListOfModifiers

Returns the list of Modifiers for this Reaction.

=item Reaction::getListOfModifiers

Returns the list of Modifiers for this Reaction.

=item Reaction::getReactant

Returns the nth reactant (SpeciesReference) of this Reaction.

=item Reaction::getReactant

Returns the reactant (SpeciesReference) in this Reaction with the given id or NULL if no such reactant exists.

=item Reaction::getProduct

Returns the nth product (SpeciesReference) of this Reaction.

=item Reaction::getProduct

Returns the product (SpeciesReference) in this Reaction with the given id or NULL if no such product exists.

=item Reaction::getModifier

Returns the nth modifier (ModifierSpeciesReference) of this Reaction.

=item Reaction::getModifier

Returns the modifier (ModifierSpeciesReference) in this Reaction with the given id or NULL if no such modifier exists.

=item Reaction::getNumReactants

Returns the number of reactants (SpeciesReferences) in this Reaction.

=item Reaction::getNumProducts

Returns the number of products (SpeciesReferences) in this Reaction.

=item Reaction::getNumModifiers

Returns the number of modifiers (ModifierSpeciesReferences) in this Reaction.

=item Reaction::unsetName

Unsets the name of this Reaction. In SBML L1, a Reaction name is required and therefore B<should always be set>. In L2, name is optional and as such may or may not be set.

=item Reaction::unsetKineticLaw

Unsets the KineticLaw of this Reaction.

=item Reaction::unsetFast

Unsets the fast status of this Reation. In L1, fast is optional with a default of false, which means it is effectively always set. In L2, however, fast is optional with no default value, so it may or may not be set to a specific value.

=item KineticLaw::KineticLaw

Creates a new KineticLaw, optionally with its formula, timeUnits and/or substanceUnits set.

=item KineticLaw::accept

Accepts the given SBMLVisitor.

=item KineticLaw::getFormula

Returns the formula of this KineticLaw.

=item KineticLaw::getMath

Returns the math of this KineticLaw.

=item KineticLaw::getListOfParameters

Returns the list of Parameters for this KineticLaw.

=item KineticLaw::getListOfParameters

Returns the list of Parameters for this KineticLaw.

=item KineticLaw::getTimeUnits

Returns the timeUnits of this KineticLaw.

=item KineticLaw::getSubstanceUnits

Returns the substanceUnits of this KineticLaw.

=item KineticLaw::isSetFormula

Returns true if the formula of this KineticLaw has been set, false otherwise.

=item KineticLaw::isSetMath

Returns true if the math of this KineticLaw has been set, false otherwise.

=item KineticLaw::isSetTimeUnits

Returns true if the timeUnits of this KineticLaw has been set, false otherwise.

=item KineticLaw::isSetSubstanceUnits

Returns true if the substanceUnits of this KineticLaw has been set, false otherwise.

=item KineticLaw::setFormula

Sets the formula of this KineticLaw to a copy of string.

=item KineticLaw::setFormulaFromMath

Sets the formula of this KineticLaw based on the current value of its math field. This convenience method is equivalent to: setFormula( SBML_formulaToString( getMath() )) except you do not need to track and free the value returned by SBML_formulaToString(). If !isSetMath(), this method has no effect.

=item KineticLaw::setMath

Sets the math of this KineticLaw to the given ASTNode. The node B<is not copied> and this KineticLaw B<takes ownership> of it; i.e. subsequent calls to this method or deleting this KineticLaw will delete the ASTNode (and any child nodes).

=item KineticLaw::setMathFromFormula

Sets the math of this KineticLaw from its current formula string. This convenience method is equivalent to: setMath( SBML_parseFormula( getFormula() )) If !isSetFormula(), this method has no effect.

=item KineticLaw::setTimeUnits

Sets the timeUnits of this KineticLaw to a copy of sname.

=item KineticLaw::setSubstanceUnits

Sets the substanceUnits of this KineticLaw to a copy of sname.

=item KineticLaw::addParameter

Adds the given Parameter to this KineticLaw.

=item KineticLaw::getParameter

Returns the nth Parameter of this KineticLaw.

=item KineticLaw::getNumParameters

Returns the number of Parameters in this KineticLaw.

=item KineticLaw::unsetTimeUnits

Unsets the timeUnits of this KineticLaw.

=item KineticLaw::unsetSubstanceUnits

Unsets the substanceUnits of this KineticLaw.

=item SimpleSpeciesReference::SimpleSpeciesReference

Creates a new SimpleSpeciesReference, optionally with its species attribute set.

=item SimpleSpeciesReference::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Reaction's next SimpleSpeciesReference (if available).

=item SimpleSpeciesReference::getSpecies

Returns the species for this SimpleSpeciesReference.

=item SimpleSpeciesReference::isSetSpecies

Returns true if the species for this SimpleSpeciesReference has been set, false otherwise.

=item SimpleSpeciesReference::setSpecies

Sets the species of this SimpleSpeciesReference to a copy of sid.

=item SpeciesReference::SpeciesReference

Creates a new SpeciesReference, optionally with its species, stoichiometry, and denominator attributes set.

=item SpeciesReference::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Reaction's next SimpleSpeciesReference (if available).

=item SpeciesReference::initDefaults

Initializes the fields of this SpeciesReference to their defaults: - stoichiometry = 1 - denominator = 1

=item SpeciesReference::getStoichiometry

Returns the stoichiometry of this SpeciesReference.

=item SpeciesReference::getStoichiometryMath

Returns the stoichiometryMath of this SpeciesReference.

=item SpeciesReference::getDenominator

Returns the denominator of this SpeciesReference.

=item SpeciesReference::isSetStoichiometryMath

Returns true if the stoichiometryMath of this SpeciesReference has been set, false otherwise.

=item SpeciesReference::setStoichiometry

Sets the stoichiometry of this SpeciesReference to value.

=item SpeciesReference::setStoichiometryMath

Sets the stoichiometryMath of this SpeciesReference to the given ASTNode. The node B<is not copied> and this SpeciesReference B<takes ownership> of it; i.e. subsequent calls to this function or a call to SpeciesReference_free() will free the ASTNode (and any child nodes).

=item SpeciesReference::setStoichiometryMath

Sets the stoichiometryMath of this SpeciesReference to the given formula string.

=item SpeciesReference::setDenominator

Sets the denominator of this SpeciesReference to value.

=item ModifierSpeciesReference::ModifierSpeciesReference

Creates a new ModifierSpeciesReference, optionally with its species attribute set.

=item ModifierSpeciesReference::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Reaction's next SimpleSpeciesReference (if available).

=item Event::Event

Creates a new Event, optionally with its id, trigger and delay attribute set. Trigger and delay may be specified as infix formula strings.

=item Event::Event

Creates a new Event with an id and trigger and (optionally) delay attributes set.

=item Event::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Model's next Event (if available).

=item Event::getId

Returns the id of this Event.

=item Event::getName

Returns the name of this Event.

=item Event::getTrigger

Returns the trigger of this Event.

=item Event::getDelay

Returns the delay of this Event.

=item Event::getTimeUnits

Returns the timeUnits of this Event.

=item Event::isSetId

Returns true if the id of this Event has been set, false otherwise.

=item Event::isSetName

Returns true if the name of this Event has been set, false otherwise.

=item Event::isSetTrigger

Returns true if the trigger of this Event has been set, false otherwise.

=item Event::isSetDelay

Returns true if the delay of this Event has been set, false otherwise.

=item Event::isSetTimeUnits

Returns true if the timeUnits of this Event has been set, false otherwise.

=item Event::setId

Sets the id of this Event to a copy of sid.

=item Event::setName

Sets the name of this Event to a copy of string.

=item Event::setTrigger

Sets the trigger of this Event to the given ASTNode. The node B<is not copied> and this Event B<takes ownership> of it; i.e. subsequent calls to this function or a call to Event_free() will free the ASTNode (and any child nodes).

=item Event::setDelay

Sets the delay of this Event to the given ASTNode. The node B<is not copied> and this Event B<takes ownership> of it; i.e. subsequent calls to this function or a call to Event_free() will free the ASTNode (and any child nodes).

=item Event::setTimeUnits

Sets the timeUnits of this Event to a copy of sid.

=item Event::unsetId

Unsets the id of this Event.

=item Event::unsetName

Unsets the name of this Event.

=item Event::unsetDelay

Unsets the delay of this Event.

=item Event::unsetTimeUnits

Unsets the timeUnits of this Event.

=item Event::addEventAssignment

Appends the given EventAssignment to this Event.

=item Event::getListOfEventAssignments

Returns the list of EventAssignments for this Event.

=item Event::getListOfEventAssignments

Returns the list of EventAssignments for this Event.

=item Event::getEventAssignment

Returns the nth EventAssignment of this Event.

=item Event::getNumEventAssignments

Returns the number of EventAssignments in this Event.

=item EventAssignment::EventAssignment

Creates a new EventAssignment, optionally with its variable and math (via infix formula string) attributes set.

=item EventAssignment::EventAssignment

Creates a new EventAssignment, optionally with its variable and math (via infix formula string) attributes set. Creates a new EventAssignment with its variable and math attributes set.

=item EventAssignment::accept

Accepts the given SBMLVisitor. Returns the result of calling C<v.visit()>, which indicates whether or not the Visitor would like to visit the Event's next EventAssignment (if available).

=item EventAssignment::getVariable

Returns the variable of this EventAssignment.

=item EventAssignment::getMath

Returns the math of this EventAssignment.

=item EventAssignment::isSetVariable

Returns true if the variable of this EventAssignment has been set, false otherwise.

=item EventAssignment::isSetMath

Returns true if the math of this EventAssignment has been set, false otherwise.

=item EventAssignment::setVariable

Sets the variable of this EventAssignment to a copy of sid.

=item EventAssignment::setMath

Sets the math of this EventAssignment to the given ASTNode. The node B<is not copied> and this EventAssignment B<takes ownership> of it; i.e. subsequent calls to this function or a call to EventAssignment_free() will free the ASTNode (and any child nodes).

=item UnitKind_equals

Tests for logical equality between two UnitKinds. This function behaves exactly like C's == operator, except for the following two cases: - UNIT_KIND_LITER == UNIT_KIND_LITRE - UNIT_KIND_METER == UNIT_KIND_METRE where C would yield false (since each of the above is a distinct enumeration value), UnitKind_equals(...) yields true. Returns true (!0) if uk1 is logically equivalent to uk2, false (0) otherwise.

=item UnitKind_forName

Returns the UnitKind with the given name (case-insensitive).

=item UnitKind_toString

Returns the name of the given UnitKind. The caller does not own the returned string and is therefore not allowed to modify it.

=item UnitKind_isValidUnitKindString

Returns nonzero if string is the name of a valid unitKind.

=item RuleType_forName

Returns the RuleType with the given name (case-insensitive).

=item RuleType_toString

Returns the name of the given RuleType. The caller does not own the returned string and is therefore not allowed to modify it.

=item readMathMLFromString

Reads the MathML from the given XML string, constructs a corresponding abstract syntax tree and returns a pointer to the root of the tree.

=item MathMLWriter::write

Writes the given MathML document to filename. Returns true on success and false if the filename could not be opened for writing.

=item MathMLWriter::write

Writes the given MathML document to the output stream. Returns true on success and false if one of the underlying Xerces or Expat components fail (rare).

=item MathMLWriter::writeToString

Writes the given MathML document to an in-memory string and returns a pointer to it. The string is owned by the caller and should be freed (with free()) when no longer needed. Returns the string on success and 0 if one of the underlying Xerces or Expat components fail (rare).

=item writeMathML

Writes the given MathML document to filename. Returns true on success and false if the filename could not be opened for writing.

=item writeMathMLToString

Writes the given MathML document to an in-memory string and returns a pointer to it. The string is owned by the caller and should be freed (with free()) when no longer needed. Returns the string on success and 0 if one of the underlying Xerces or Expat components fail (rare).

=item ASTNode::ASTNode

Creates a new ASTNode. By default, node will have a type of AST_UNKNOWN and should be set to something else as soon as possible.

=item ASTNode::canonicalize

Attempts to convert this ASTNode to a canonical form and returns true if the conversion succeeded, false otherwise. The rules determining the canonical form conversion are as follows: 1. If the node type is AST_NAME and the node name matches 'ExponentialE', 'Pi', 'True' or 'False' the node type is converted to the corresponding AST_CONSTANT type. 2. If the node type is an AST_FUNCTION and the node name matches an L1 or L2 (MathML) function name, logical operator name, or relational operator name, the node is converted to the correspnding AST_FUNCTION, AST_LOGICAL or AST_CONSTANT type. L1 function names are searched first, so canonicalizing 'log' will result in a node type of AST_FUNCTION_LN (see L1 Specification, Appendix C). Some canonicalizations result in a structural converion of the nodes (by adding a child). For example, a node with L1 function name 'sqr' and a single child node (the argument) will be transformed to a node of type AST_FUNCTION_POWER with two children. The first child will remain unchanged, but the second child will be an ASTNode of type AST_INTEGER and a value of 2. The function names that result in structural changes are: log10, sqr and sqrt.

=item ASTNode::addChild

Adds the given node as a child of this ASTNode. Child nodes are added in-order from 'left-to-right'.

=item ASTNode::prependChild

Adds the given node as a child of this ASTNode. This method adds child nodes from 'right-to-left'.

=item ASTNode::getChild

Returns the nth child of this ASTNode or NULL if this node has no nth child (n E<gt> ASTNode_getNumChildren() - 1).

=item ASTNode::getLeftChild

Returns the left child of this ASTNode. This is equivalent to getChild(0);

=item ASTNode::getRightChild

Returns the right child of this ASTNode or NULL if this node has no right child. If getNumChildren() E<gt> 1, then this is equivalent to: getChild( getNumChildren() - 1);

=item ASTNode::getNumChildren

Returns the number of children of this ASTNode or 0 is this node has no children.

=item ASTNode::getListOfNodes

Performs a depth-first search (DFS) of the tree rooted at node and returns the List of nodes where predicate(node) returns true. The typedef for ASTNodePredicate is: int (ASTNodePredicate) (const ASTNode_t node); where a return value of non-zero represents true and zero represents false. The List returned is owned by the caller and should be deleted. The ASTNodes in the list, however, are not owned by the caller (as they still belong to the tree itself) and therefore should not be deleted.

=item ASTNode::fillListOfNodes

This method is identical in functionality to getListOfNodes(), except the List is passed-in by the caller.

=item ASTNode::getCharacter

Returns the value of this ASTNode as a single character. This function should be called only when getType() is one of AST_PLUS, AST_MINUS, AST_TIMES, AST_DIVIDE or AST_POWER.

=item ASTNode::getInteger

Returns the value of this ASTNode as a (long) integer. This function should be called only when getType() == AST_INTEGER.

=item ASTNode::getName

Returns the value of this ASTNode as a string. This function may be called on nodes that are not operators (isOperator() == false) or numbers (isNumber() == false).

=item ASTNode::getNumerator

Returns the value of the numerator of this ASTNode. This function should be called only when getType() == AST_RATIONAL.

=item ASTNode::getDenominator

Returns the value of the denominator of this ASTNode. This function should be called only when getType() == AST_RATIONAL.

=item ASTNode::getReal

Returns the value of this ASTNode as a real (double). This function should be called only when isReal() == true. This function performs the necessary arithmetic if the node type is AST_REAL_E (mantissa $10^exponent$) or AST_RATIONAL (numerator / denominator).

=item ASTNode::getMantissa

Returns the value of the mantissa of this ASTNode. This function should be called only when getType() is AST_REAL_E or AST_REAL. If AST_REAL, this method is identical to getReal().

=item ASTNode::getExponent

Returns the value of the exponent of this ASTNode. This function should be called only when getType() is AST_REAL_E or AST_REAL.

=item ASTNode::getPrecedence

Returns the precedence of this ASTNode (as defined in the SBML L1 specification).

=item ASTNode::getType

Returns the type of this ASTNode.

=item ASTNode::isConstant

Returns true if this ASTNode is a MathML constant (true, false, pi, exponentiale), false otherwise.

=item ASTNode::isFunction

Returns true if this ASTNode is a function in SBML L1, L2 (MathML) (everything from abs() to tanh()) or user-defined, false otherwise.

=item ASTNode::isInteger

Returns true if this ASTNode is of type AST_INTEGER, false otherwise.

=item ASTNode::isLambda

Returns true if this ASTNode is of type AST_LAMBDA, false otherwise.

=item ASTNode::isLog10

Returns true if the given ASTNode represents a log10() function, false otherwise. More precisley, the node type is AST_FUNCTION_LOG with two children the first of which is an AST_INTEGER equal to 10.

=item ASTNode::isLogical

Returns true if this ASTNode is a MathML logical operator (and, or, not, xor), false otherwise.

=item ASTNode::isName

Returns true if this ASTNode is a user-defined variable name in SBML L1, L2 (MathML) or the special symbols delay or time, false otherwise.

=item ASTNode::isNumber

Returns true if this ASTNode is a number, false otherwise. This is functionally equivalent to: isInteger() || isReal().

=item ASTNode::isOperator

Returns true if this ASTNode is an operator, false otherwise. Operators are: +, -, , / and \^ (power).

=item ASTNode::isRational

Returns true if this ASTNode is of type AST_RATIONAL, false otherwise.

=item ASTNode::isReal

Returns true if the value of this ASTNode can represented as a real number, false otherwise. To be a represented as a real number, this node must be of one of the following types: AST_REAL, AST_REAL_E or AST_RATIONAL.

=item ASTNode::isRelational

Returns true if this ASTNode is a MathML relational operator (==, >=, >, <=, E<lt> !=), false otherwise.

=item ASTNode::isSqrt

Returns true if the given ASTNode represents a sqrt() function, false otherwise. More precisley, the node type is AST_FUNCTION_ROOT with two children the first of which is an AST_INTEGER equal to 2.

=item ASTNode::isUMinus

Returns true if this ASTNode is a unary minus, false otherwise. For numbers, unary minus nodes can be 'collapsed' by negating the number. In fact, SBML_parseFormula() does this during its parse. However, unary minus nodes for symbols (AST_NAMES) cannot be 'collapsed', so this predicate function is necessary. A node is defined as a unary minus node if it is of type AST_MINUS and has exactly one child.

=item ASTNode::isUnknown

Returns true if this ASTNode is of type AST_UNKNOWN, false otherwise.

=item ASTNode::setCharacter

Sets the value of this ASTNode to the given character. If character is one of '+', '-', '', '/' or '\^', the node type will be set accordingly. For all other characters, the node type will be set to AST_UNKNOWN.

=item ASTNode::setName

Sets the value of this ASTNode to the given name. The node type will be set (to AST_NAME) ONLY IF the ASTNode was previously an operator (isOperator(node) == true) or number (isNumber(node) == true). This allows names to be set for AST_FUNCTIONs and the like.

=item ASTNode::setValue

Sets the value of this ASTNode to the given integer and sets the node type to AST_INTEGER.

=item ASTNode::setValue

Sets the value of this ASTNode to the given (long) integer and sets the node type to AST_INTEGER.

=item ASTNode::setValue

Sets the value of this ASTNode to the given rational in two parts: the numerator and denominator. The node type is set to AST_RATIONAL.

=item ASTNode::setValue

Sets the value of this ASTNode to the given real (double) and sets the node type to AST_REAL. This is functionally equivalent to: setValue(value, 0);

=item ASTNode::setValue

Sets the value of this ASTNode to the given real (double) in two parts: the mantissa and the exponent. The node type is set to AST_REAL_E.

=item ASTNode::setType

Sets the type of this ASTNode to the given ASTNodeType.

=item SBML_parseFormula

Parses the given SBML formula and returns a representation of it as an Abstract Syntax Tree (AST). The root node of the AST is returned. If the formula contains a grammatical error, NULL is returned.

=item MathMLDocument::MathMLDocument

Creates a new MathMLDocument.

=item MathMLDocument::getMath

Returns the an abstract syntax tree (AST) representation of the math in this MathMLDocument.

=item MathMLDocument::isSetMath

Returns true if the math of this MathMLDocument has been set, false otherwise.

=item MathMLDocument::setMath

Sets the math of this MathMLDocument to the given ASTNode. The node B<is not copied> and this MathMLDocument B<takes ownership> of it; i.e. subsequent calls to this function or a call to MathMLDocument_free() will free the ASTNode (and any child nodes).

=item ParseMessage::ParseMessage

Creates a new ParseMessage reporting that message occurred at the given line and column. Each ParseMessage has an identification number associated with it.

=item ParseMessage::ParseMessage

Creates a new ParseMessage by copying an existing ParseMessage.

=item ParseMessage::getId

Returns the id of this ParseMessage.

=item ParseMessage::getMessage

Returns the message text of this ParseMessage.

=item ParseMessage::getLine

Returns the line number where this ParseMessage ocurred.

=item ParseMessage::getColumn

Returns the column number where this ParseMessage occurred.

=item XMLNamespace::XMLNamespace

Creates a new XMLNamespace with prefix and URI. If prefix starts with 'xmlns:' (case-insensitive), it will be removed.

=item XMLNamespaceList::add

Adds XMLNamespace to this list of XML namespaces.

=item XMLNamespaceList::add

Adds (prefix, URI) to this list of XML namespaces. If prefix starts with 'xmlns:' (case-insensitive), it will be removed.

=item XMLNamespaceList::getLength

Returns the number of XML namespaces in this list.

=item XMLNamespaceList::getNamespace

Returns the nth XMLNamespace in this list.

=item XMLNamespaceList::getPrefix

Returns the prefix of the nth XML namespace in this list.

=item XMLNamespaceList::getPrefix

Returns the prefix of the XML namespace with the given URI. If URI is not in this list of namespaces, an empty string is returned.

=item XMLNamespaceList::getURI

Returns the URI of the nth XML namespace in this list.

=item XMLNamespaceList::getURI

Returns the URI of the XML namespace with the given prefix. If prefix was not found, an empty string is returned.

=cut
